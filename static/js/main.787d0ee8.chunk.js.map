{"version":3,"sources":["vis/styled.ts","vis/utils.ts","vis/IllStateDist.tsx","vis/DistrictDistribution.tsx","vis/PatientInfo.tsx","vis/R0.tsx","vis/main/District.ts","vis/main/config.ts","vis/main/Individuals.ts","vis/World.tsx","model/type.ts","config.ts","model/IllRelation.ts","model/Individual.ts","model/Disease.ts","model/District.ts","model/Hospital.ts","model/World.ts","setting.tsx","App.tsx","serviceWorker.ts","index.tsx","res/virus.jpg"],"names":["ChartContainer","styled","div","useIncrementalProcess","agg","dv","foldSize","MAX_DATA_SIZE","React","useState","lastAggLength","setLastAggLength","processedData","setProcessedData","shrinkFactor","setShrinkFactor","useEffect","newData","old","length","slice","filter","_","index","Math","floor","source","concat","rows","DataSet","View","transform","type","callback","row","population","time","datetime","day","scene","fields","key","value","retains","StackPopulation","data","forceFit","height","padding","name","position","crosshairs","color","opacity","size","districtDistribution","DistrictDistribution","charts","useMemo","i","newDv","push","style","dots","infinite","speed","slidesToScroll","slidesToShow","arrows","quarantined","PatientInfo","R0","District","district","bbox","ctx","fill","stroke","placeBoundingBoxes","this","init","curX","curY","places","w","MARGIN","h","x","y","WIDTH","save","fillStyle","strokeStyle","fillRect","font","fillText","restore","IllColors","Individuals","individuals","districts","positions","getCurrentPosition","globalAlpha","individual","illState","beginPath","arc","PI","closePath","currentPlace","getPlaceBBox","random","group","TWEEN","Group","newPos","Tween","to","start","IllState","QuanrantineState","Container","World","props","canvas","endTime","animationKey","world","test","grp","onUpdate","object","console","log","requestAnimationFrame","anim","update","createRef","current","getContext","facility","hospital","work","publicTransport","living","medicalBed","cemetery","draw","updateWorld","translate","scale","clearRect","Date","getTime","getTweenGroup","width","ref","Component","theme","plotBackground","animation","axis","top","label","textStyle","line","tickLine","bottom","left","grid","lineStyle","right","circle","radius","helix","legend","unCheckColor","html","gradient","tooltip","backgroundColor","boxShadow","tooltipCrosshairsRect","rectStyle","tooltipCrosshairsLine","guide","text","region","lineWidth","fillOpacity","defaultWorldParam","disease","cureRate","deadRate","immuneRate","infectiousRate","selfRecoverRate","seriousRate","toExposedInfactiousRate","toLatentlyInfactiousRate","family","familyPopulationDistribution","partyRate","medicine","confirmRate","cureRateInHospital","cureRateOnMedicalBed","deteriorateFactorOnMedicalBed","visitingHospitalRate","doctorNum","infactiousRateBetweenDoctorAndPatient","infactiousRateBetweenPatients","medicalBedNumber","goOutRateWhenQuarantedAtHome","visitingHospitalRateWhenExposed","numberOfScenePerDay","origin","initialSize","densityOfPopulation","doPeriodicPhysicalExamination","facilityActiveRate","privateCarRate","unemploymentRate","IllRelation","host","from","illRelation","Individual","hasCar","wearMask","home","workPlace","param","hospitalPlace","targetingFacilityPlaces","treatmentState","isDoctor","estimatedR0","undefined","other","infect","publicTransportDistrict","isQuarantined","beInPlace","nextAvailablePlace","place","remove","cannotMoveAtAll","quanrantine","atHome","isFull","count","gotoHospital","gotoFacility","factor","atHospital","susceptible","incubating","latentlyInfactious","exposedInfactious","serious","dead","recovered","upgradeIll","Place","max","people","Set","id","add","it","values","val","next","clear","delete","func","forEach","num","maxPopulation","availableIndex","Error","randomPlace","mapPeople","sum","LivingQuater","distribution","fillIndex","familySize","Hospital","doctors","examPerson","person","isConfirmed","isSuspected","none","goHome","hospitalize","isWorking","aggData","postSceneListeners","nextFillingPlace","Array","map","randomizeIndivisuals","p","docNum","gotoWork","listener","b","merge","party","goRandomPlace","others","inHospital","rate","iter","postInfect","isDead","infectOther","upgrade","preGoto","Object","beforeSceneStart","upgradeDisease","preMove","goToWork","callItADay","exam","setTimeToNextScene","aggregateInfo","info","total","confirmed","suspected","doctor","available","ill","containedPatients","reduce","cur","SettingContainer","configEntries","Setting","visible","setVisible","JSON","parse","localStorage","getItem","worldParam","setWorldParam","setVisibleTrue","useCallback","setVisibleFalse","genParamChanger","params","state","path","obj","assign","target","attr","changeParam","setParam","setParams","setItem","stringify","settings","parentName","subtype","settingName","settingType","v","step","log10","min","pow","onChange","defaultValue","onClick","margin","icon","SettingOutlined","title","onOk","onCancel","Global","G2","registerTheme","setTheme","timeSlots","DatetimeContainer","App","prop","WorldModel","looping","buffIndex","worldRef","playLoop","setState","setTimeout","pause","play","reset","document","body","backgroundImage","img","className","justify","xl","lg","PauseOutlined","CaretRightOutlined","StepForwardOutlined","CloseOutlined","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"ogCAEO,IAAMA,EAAiBC,IAAOC,IAAV,K,QCCdC,EAAwB,SAACC,EAAYC,GAAyD,IAAhDC,EAA+C,uDAA5B,EAAGC,EAAyB,uDAAT,IAAS,EAC5DC,IAAMC,SAAS,GAD6C,mBAC/FC,EAD+F,KAChFC,EADgF,OAE5DH,IAAMC,SAAS,IAF6C,mBAE/FG,EAF+F,KAEhFC,EAFgF,OAG9DL,IAAMC,SAAS,GAH+C,mBAG/FK,EAH+F,KAGjFC,EAHiF,KA6BtG,OAzBAP,IAAMQ,WAAU,WACZ,IACIC,EADAC,EAAMN,EAEV,GAAIR,EAAIe,OAAST,EAAe,CAC5B,GAAIN,EAAIe,OAAST,EAA+B,EAAfI,EAC7B,OAGJG,EAAUb,EAAIgB,MAAMV,GAAeW,QAAO,SAACC,EAAGC,GAAJ,OAAcA,EAAQT,IAAiB,UAEjFI,EAAM,GACND,EAAUb,EAGVc,EAAIC,OAASZ,IACbQ,EAA+B,EAAfD,GAChBI,EAAMA,EAAIG,QAAO,SAACC,EAAGC,GAAJ,OAAcC,KAAKC,MAAMF,EAAQjB,GAAY,IAAM,MAGxED,EAAGqB,OAAOT,GACVJ,EAAiBK,EAAIS,OAAOtB,EAAGuB,OAC/BjB,EAAiBP,EAAIe,UAEtB,CAACf,EAAKA,EAAIe,SAENP,GCrBLP,GAAK,IAAIwB,IAAQC,MAClBC,UAAU,CACPC,KAAM,MACNC,SAFO,SAEEC,GACL,OAAO,eACAA,EAAIC,WADX,CAEIC,KACIF,EAAIG,SAASC,IACbd,KAAKC,MAAOS,EAAIG,SAASE,MAAQ,EAAK,IAAM,QAI3DR,UAAU,CACPC,KAAM,OACNQ,OAAQ,CACJ,cACA,aACA,qBACA,oBACA,UACA,OACA,aAEJC,IAAK,QACLC,MAAO,QACPC,QAAS,CAAC,UAILC,EAAkB,SAAC,GAAoB,IAAlBxC,EAAiB,EAAjBA,IACxByC,EAAO1C,EAAsBC,EAAKC,EAAI,GAC5C,OACI,kBAACL,EAAD,KACI,sDACA,kBAAC,QAAD,CACI6C,KAAMA,EACNC,UAAQ,EACRC,OAAQ,IACRC,QAAS,CAAC,GAAI,GAAI,GAAI,MAEtB,kBAAC,OAAD,CAAMC,KAAK,SACX,kBAAC,OAAD,CAAMA,KAAK,UACX,kBAAC,SAAD,CAAQC,SAAU,SAClB,kBAAC,UAAD,CACIC,WAAY,CACRnB,KAAM,WAGd,kBAAC,OAAD,CAEIA,KAAK,YACLkB,SAAS,aACTE,MAAM,QACNC,QAAS,KAEb,kBAAC,OAAD,CACIrB,KAAK,YACLkB,SAAS,aACTI,KAAM,EACNF,MAAM,a,iBC1DpB/C,GAAK,IAAIwB,IAAQC,MAClBC,UAAU,CACPC,KAAM,MACNC,SAFO,SAEEC,GACL,OAAO,eACAA,EAAIqB,qBADX,GAEOrB,EAAIG,aAIlBN,UAAU,CACPC,KAAM,OACNQ,OAAQ,CACJ,aACA,SACA,OACA,kBACA,WACA,WACA,YAEJC,IAAK,QACLC,MAAO,QACPC,QAAS,CAAC,MAAO,WAGZa,EAAuB,SAAC,GAAoB,IAAlBpD,EAAiB,EAAjBA,IAC7ByC,EAAO1C,EAAsBC,EAAKC,EAAI,GAEtCoD,EAASjD,IAAMkD,SAAQ,WAEzB,IADA,IAAMD,EAAS,GADgB,WAEtBE,GACL,IAAMC,GAAQ,IAAI/B,IAAQC,MAAOJ,OAAOmB,GAAMd,UAAU,CACpDC,KAAM,SACNC,SAFoD,SAE3CC,GACL,OAAOA,EAAIK,QAAUoB,KAI7BF,EAAOI,KACH,kBAAC,QAAD,CACId,OAAQ,IACRC,QAAS,CAAC,GAAI,GAAI,GAAI,KACtBH,KAAMe,EACNd,UAAQ,EACRL,IAAKkB,GAEL,kBAAC,OAAD,CAAMV,KAAK,QACX,kBAAC,OAAD,CAAMA,KAAK,UACX,kBAAC,SAAD,CAAQC,SAAS,SACjB,kBAAC,UAAD,CACIC,WAAY,CACRnB,KAAM,WAGd,kBAAC,OAAD,CAAMA,KAAK,YAAYkB,SAAS,YAAYE,MAAM,UAClD,kBAAC,OAAD,CACIpB,KAAK,YACLkB,SAAS,YACTI,KAAM,EACNF,MAAM,aA7BbO,EAAI,EAAGA,EAHH,EAGiBA,IAAM,EAA3BA,GAkCT,OAAOF,IACR,CAACZ,IAEJ,OACI,kBAAC7C,EAAD,CAAgB8D,MAAO,CAAEd,QAAS,qBAC9B,uDA1CS,EA0CT,YACA,kBAAC,IAAD,CACIe,MAAI,EACJC,UAAQ,EACRC,MAAO,IACPC,eAAgB,EAChBC,aAAc,EACdC,QAAQ,GAEPX,KChFXpD,GAAK,IAAIwB,IAAQC,MAClBC,UAAU,CACPC,KAAM,MACNC,SAFO,SAEEC,GACL,OAAO,eACAA,EAAImC,YADX,CAEIjC,KACIF,EAAIG,SAASC,IACbd,KAAKC,MAAOS,EAAIG,SAASE,MAAQ,EAAK,IAAM,QAI3DR,UAAU,CACPC,KAAM,OACNQ,OAAQ,CAAC,YAAa,aACtBC,IAAK,QACLC,MAAO,QACPC,QAAS,CAAC,UAIL2B,EAAc,SAAC,GAAoB,IAAlBlE,EAAiB,EAAjBA,IACpByC,EAAO1C,EAAsBC,EAAKC,EAAI,GAC5C,OACI,kBAACL,EAAD,KACI,wCACA,kBAAC,QAAD,CACI+C,OAAQ,IACRC,QAAS,CAAC,GAAI,GAAI,GAAI,KACtBH,KAAMA,EACNC,UAAQ,GAER,kBAAC,OAAD,CAAMG,KAAK,SACX,kBAAC,OAAD,CAAMA,KAAK,UACX,kBAAC,SAAD,CAAQC,SAAS,gBACjB,kBAAC,UAAD,CACIC,WAAY,CACRnB,KAAM,OAGd,kBAAC,OAAD,CACIA,KAAK,OACLkB,SAAS,aACTE,MAAM,QACNE,KAAM,OC5CpBjD,GAAK,IAAIwB,IAAQC,MAClBC,UAAU,CACPC,KAAM,MACNC,SAFO,SAEEC,GACL,MAAO,CACHqC,GAAIrC,EAAIqC,GACRnC,KACIF,EAAIG,SAASC,IACbd,KAAKC,MAAOS,EAAIG,SAASE,MAAQ,EAAK,IAAM,OAMnDgC,EAAK,SAAC,GAAoB,IAAlBnE,EAAiB,EAAjBA,IACXyC,EAAO1C,EAAsBC,EAAKC,GACxC,OACI,kBAACL,EAAD,KACI,kCACA,kBAAC,QAAD,CACI+C,OAAQ,IACRC,QAAS,CAAC,GAAI,GAAI,GAAI,KACtBH,KAAMA,EACNC,UAAQ,GAER,kBAAC,OAAD,CAAMG,KAAK,SACX,kBAAC,OAAD,CAAMA,KAAK,UACX,kBAAC,UAAD,CACIE,WAAY,CACRnB,KAAM,OAGd,kBAAC,OAAD,CACIA,KAAK,OACLkB,SAAS,UACTI,KAAM,O,QCzCbkB,EAAb,WAEI,WACYC,EACAC,EACAC,EACA1B,GAGT,IAFS2B,EAEV,uDAFyB,2BACfC,EACV,uDAD2B,GAC3B,yBANUJ,WAMV,KALUC,OAKV,KAJUC,MAIV,KAHU1B,OAGV,KAFU2B,OAEV,KADUC,SACV,KARFC,wBAQE,EACEC,KAAKC,OAVb,mDAcQD,KAAKD,mBAAqB,GAE1B,IADA,IAAIG,EAAO,EAAGC,EAAO,EACZvB,EAAI,EAAGA,EAAIoB,KAAKN,SAASU,OAAOhE,OAAQwC,IACzCsB,ECrBK,EDqBU,EAAIF,KAAKL,KAAKU,IAC7BH,EAAO,EACPC,GAAQG,IAGZN,KAAKD,mBAAmBjB,KAAK,CACzByB,EC1BM,GD2BNF,EC5BK,ED6BLG,EAAGN,EAAOF,KAAKL,KAAKa,EACpBC,EAAGN,EAAOH,KAAKL,KAAKc,EAAI,KAG5BP,GAAQQ,KA7BpB,6BAkCQV,KAAKJ,IAAIe,OACTX,KAAKJ,IAAIgB,UAAYZ,KAAKH,KAC1BG,KAAKJ,IAAIiB,YAAcb,KAAKF,OAC5BE,KAAKJ,IAAIkB,SAASd,KAAKL,KAAKa,EAAGR,KAAKL,KAAKc,EAAGT,KAAKL,KAAKU,EAAGL,KAAKL,KAAKY,GACnEP,KAAKJ,IAAIiB,YAAc,GACvBb,KAAKJ,IAAIgB,UAAY,OACrBZ,KAAKJ,IAAImB,KAAO,iBAChBf,KAAKJ,IAAIoB,SAAShB,KAAK9B,KAAM8B,KAAKL,KAAKa,EAAI,GAAIR,KAAKL,KAAKc,EAAI,IAC7DT,KAAKJ,IAAIqB,YA1CjB,mCA+CiBzE,GACT,OAAOwD,KAAKD,mBAAmBvD,OAhDvC,KECM0E,EAAY,CAAC,OAAQ,OAAQ,SAAU,OAAQ,MAAO,OAAQ,SACvDC,EAAb,WAGI,WACYvB,EACRwB,EACQC,GACV,yBAHUzB,MAGX,KADWyB,YACX,KANDD,iBAMC,OALDE,eAKC,EACGtB,KAAKoB,YAAcA,EAAYxE,SAC/BoD,KAAKsB,UAAYtB,KAAKuB,qBAT9B,mDAaQvB,KAAKJ,IAAIe,OACTX,KAAKJ,IAAI4B,YAAc,GACvB,IAAK,IAAI5C,EAAI,EAAGA,EAAIoB,KAAKoB,YAAYhF,OAAQwC,IAAM,CAC/C,IAAM6C,EAAazB,KAAKoB,YAAYxC,GACpCoB,KAAKJ,IAAIgB,UAAYM,EAAUO,EAAWC,UAC1C1B,KAAKJ,IAAI+B,YACT3B,KAAKJ,IAAIgC,IAAI5B,KAAKsB,UAAU1C,GAAG4B,EAAGR,KAAKsB,UAAU1C,GAAG6B,EAAG,EAAG,EAAW,EAARhE,KAAKoF,IAClE7B,KAAKJ,IAAIkC,YACT9B,KAAKJ,IAAIC,OAGbG,KAAKJ,IAAIqB,YAxBjB,2CA4BQ,IAAMK,EAAwB,GADL,uBAEzB,YAAyBtB,KAAKoB,YAA9B,+CAA2C,CAAC,IAAD,UACFW,aAA9BvF,EADgC,EAChCA,MAAOkD,EADyB,EACzBA,SADyB,EAENM,KAAKqB,UAAU3B,EAASxB,MACrB8D,aAAaxF,GAA1CgE,EAHgC,EAGhCA,EAAGC,EAH6B,EAG7BA,EAAGJ,EAH0B,EAG1BA,EAAGE,EAHuB,EAGvBA,EAChBe,EAAUxC,KAAK,CACX0B,EAAGA,EAAI/D,KAAKC,MAAM2D,EAAI5D,KAAKwF,UAC3BxB,EAAGA,EAAIhE,KAAKC,MAAM6D,EAAI9D,KAAKwF,aARV,kFAYzB,OAAOX,IAvCf,sCA6CQ,IAFA,IAAMY,EAAQ,IAAIC,IAAMC,MAClBC,EAASrC,KAAKuB,qBACX3C,EAAI,EAAGA,EAAIoB,KAAKoB,YAAYhF,OAAQwC,IAC3B,IAAIuD,IAAMG,MAAMtC,KAAKsB,UAAU1C,GAAIsD,GAC5CK,GAAGF,EAAOzD,GAAI,KAAM4D,QAG7B,OAAON,MAlDf,K,+ICCA,ICQYO,EAqBAC,ED7BNC,EAAYzH,IAAOC,IAAV,KAUFyH,EAAb,YAWI,WAAYC,GAAe,IAAD,8BACtB,4CAAMA,KAXVvF,cAU0B,IAT1BwF,YAS0B,IAR1BlD,SAQ0B,IAP1ByB,eAO0B,IAN1BD,iBAM0B,IAL1B2B,aAK0B,IAJ1BC,kBAI0B,IAH1BC,WAG0B,IAgH1BC,KAAO,WACH,IAAM/E,EAAW,CAAC,CAAEqC,EAAG,GAAK,CAAEA,EAAG,MAC3B2C,EAAM,IAAIhB,IAAMC,MACtB,IAAID,IAAMG,MAAMnE,EAAUgF,GACrBZ,GAAG,CAAC,CAAE/B,EAAG,KAAO,CAAEA,EAAG,IAAM,KAC3B4C,UAAS,SAACC,GACPC,QAAQC,IAAIF,EAAQlF,MAEvBqE,QACLgB,uBAAsB,SAASC,IAC3BD,sBAAsBC,GACtBN,EAAIO,aAzHR,EAAKZ,OAASrH,IAAMkI,YACpB,EAAKV,MAAQ,EAAKJ,MAAMI,MAHF,EAX9B,2EAkBYjD,KAAKiD,QAAUjD,KAAK6C,MAAMI,QAC1BjD,KAAKiD,MAAQjD,KAAK6C,MAAMI,MACxBjD,KAAKC,UApBjB,0CAyBaD,KAAK8C,OAAOc,UAIjB5D,KAAKJ,IAAMI,KAAK8C,OAAOc,QAAQC,WAAW,MAC1C7D,KAAKC,UA9Bb,6BAkCQD,KAAKqB,UAAY,CACbyC,SAAU,IAAIrE,EACVO,KAAKiD,MAAM5B,UAAUyC,SACrB,CAAEtD,EAAG,IAAKC,EAAG,GAAIF,EAAG,IAAKF,EAAG,KAC5BL,KAAKJ,IACL,WACA,2BAEJmE,SAAU,IAAItE,EACVO,KAAKiD,MAAM5B,UAAU0C,SACrB,CAAEvD,EAAG,IAAKC,EAAG,IAAKF,EAAG,IAAKF,EAAG,KAC7BL,KAAKJ,IACL,WACA,2BAEJoE,KAAM,IAAIvE,EACNO,KAAKiD,MAAM5B,UAAU2C,KACrB,CAAExD,EAAG,IAAKC,EAAG,EAAGF,EAAG,IAAKF,EAAG,KAC3BL,KAAKJ,IACL,OACA,2BAEJqE,gBAAiB,IAAIxE,EACjBO,KAAKiD,MAAM5B,UAAU4C,gBACrB,CAAEzD,EAAG,IAAKC,EAAG,EAAGF,EAAG,GAAIF,EAAG,KAC1BL,KAAKJ,IACL,mBACA,2BAEJsE,OAAQ,IAAIzE,EACRO,KAAKiD,MAAM5B,UAAU6C,OACrB,CAAE1D,EAAG,EAAGC,EAAG,EAAGF,EAAG,IAAKF,EAAG,KACzBL,KAAKJ,IACL,mBACA,2BAEJuE,WAAY,IAAI1E,EACZO,KAAKiD,MAAM5B,UAAU8C,WACrB,CAAE3D,EAAG,EAAGC,EAAG,IAAKF,EAAG,IAAKF,EAAG,KAC3BL,KAAKJ,IACL,kBACA,2BAEJwE,SAAU,IAAI3E,EACVO,KAAKiD,MAAM5B,UAAU+C,SACrB,CAAE5D,EAAG,IAAKC,EAAG,IAAKF,EAAG,IAAKF,EAAG,KAC7BL,KAAKJ,IACL,WACA,4BAIRI,KAAKoB,YAAc,IAAID,EAAYnB,KAAKJ,IAAMI,KAAKiD,MAAM7B,YAAapB,KAAKqB,WAC3ErB,KAAKgD,aAAe,EACpBhD,KAAKqE,KAAK,KAxFlB,2BA2FS3G,EAAawE,GAAc,IAAD,OAC3B,GAAKlC,KAAKJ,IAAV,CASA,IAAK,IAAMlC,KALXsC,KAAKsE,cACLtE,KAAKJ,IAAIe,OACTX,KAAKJ,IAAI2E,UAAU,GAAI,IACvBvE,KAAKJ,IAAI4E,MAAM,IAAO,EAAG,IAAO,GAChCxE,KAAKJ,IAAI6E,UAAU,EAAG,EAAG,IAAK,KACZzE,KAAKqB,UAAW,CACRrB,KAAKqB,UAAU3D,GACjC2G,OAERrE,KAAKoB,YAAYiD,OACjBrE,KAAKJ,IAAIqB,UACLiB,GACAA,EAAMwB,SAENhG,IAAQsC,KAAKgD,cAAgBhD,KAAK+C,UAAW,IAAI2B,MAAOC,UAAY3E,KAAK+C,SACzES,uBAAsB,kBAAI,EAAKa,KAAK3G,EAAKwE,SA/GrD,6BAoHQlC,KAAKsE,cACL,IAAMpC,EAAQlC,KAAKoB,YAAYwD,gBAC/B5E,KAAK+C,SAAU,IAAI2B,MAAOC,UAAY,IACtC3E,KAAKgD,aAAevG,KAAKwF,SACzBjC,KAAKqE,KAAKrE,KAAKgD,aAAcd,KAxHrC,+BA2IQ,OACI,kBAACS,EAAD,KACI,4BAAQkC,MAAO,KAAM7G,OAAQ,KAAM8G,IAAK9E,KAAK8C,OAAQ/D,MAAO,CAAC8F,MAAO,IAAK7G,OAAQ,YA7IjG,GAA2BvC,IAAMsJ,W,sEEhBpBC,EAAQ,CACjBC,eAAgB,CACZpF,KAAM,mBAEVqF,WAAW,EACXC,KAAM,CACFC,IAAK,CACDC,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGd0F,KAAM,CACFzF,OAAQ,WAEZ0F,SAAU,CACN1F,OAAQ,YAGhB2F,OAAQ,CACJJ,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGd0F,KAAM,CACFzF,OAAQ,WAEZ0F,SAAU,CACN1F,OAAQ,YAGhB4F,KAAM,CACFL,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGd8F,KAAM,CACFC,UAAW,CACP9F,OAAQ,aAIpB+F,MAAO,CACHR,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGd8F,KAAM,CACFC,UAAW,CACP9F,OAAQ,aAIpBgG,OAAQ,CACJT,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGd0F,KAAM,CACFzF,OAAQ,WAEZ0F,SAAU,CACN1F,OAAQ,WAEZ6F,KAAM,CACFC,UAAW,CACP9F,OAAQ,aAIpBiG,OAAQ,CACJV,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGd0F,KAAM,CACFzF,OAAQ,WAEZ0F,SAAU,CACN1F,OAAQ,WAEZ6F,KAAM,CACFC,UAAW,CACP9F,OAAQ,aAIpBkG,MAAO,CACHT,KAAM,CACFzF,OAAQ,WAEZ0F,SAAU,CACN1F,OAAQ,aAIpBuF,MAAO,CACHC,UAAW,CACPzF,KAAM,YAGdoG,OAAQ,CACJJ,MAAO,CACHP,UAAW,CACPzF,KAAM,WAEVqG,aAAc,WAElBR,KAAM,CACFJ,UAAW,CACPzF,KAAM,WAEVqG,aAAc,WAElBd,IAAK,CACDE,UAAW,CACPzF,KAAM,WAEVqG,aAAc,WAElBT,OAAQ,CACJH,UAAW,CACPzF,KAAM,WAEVqG,aAAc,WAElBC,KAAM,CACF,YAAa,CACT9H,MAAO,YAGf+H,SAAU,CACNd,UAAW,CACPzF,KAAM,WAEV+F,UAAW,CACP9F,OAAQ,aAIpBuG,QAAQ,4BAEY,CACZhI,MAAO,UACPiI,gBAAiB,qBACjBC,UAAW,qBAGnBC,sBAAuB,CACnBvJ,KAAM,OACNwJ,UAAW,CACP5G,KAAM,OACNvB,QAAS,KAGjBoI,sBAAuB,CACnBd,UAAW,CACP9F,OAAQ,8BAGhB6G,MAAO,CACHpB,KAAM,CACFqB,KAAM,CACF7H,MAAO,CACHc,KAAM,aAIlB+G,KAAM,CACF7H,MAAO,CACHc,KAAM,YAGdgH,OAAQ,CAEJ9H,MAAO,CACH+H,UAAW,EACXjH,KAAM,OACNkH,YAAa,QAMhBC,EAAgC,CACzCC,QAAS,CACLC,SAAU,EAAI,EAAI,GAAK,GACvBC,SAAU,EAAI,EAAI,GAAK,IACvBC,WAAY,EACZC,eAAgB,IAChBnJ,KAAM,QACNoJ,gBAAiB,EACjBC,YAAa,EAAI,EAAI,GACrBC,wBAAyB,EAAI,EAAI,IACjCC,yBAA0B,EAAI,EAAI,GAEtCC,OAAQ,CACJC,6BAA8B,CAC1B,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,GACL,CAAC,GAAI,KAETC,UAAW,KAEfC,SAAU,CACNC,YAAa,IACbC,mBAAoB,KACpBC,qBAAsB,KACtBC,8BAA+B,GAC/BC,qBAAsB,KACtBC,UAAW,GACXC,sCAAuC,KACvCC,8BAA+B,KAC/BC,iBAAkB,GAEtB7G,WAAY,CACR8G,6BAA8B,IAC9BC,gCAAiC,KAErCC,oBAAqB,EACrBxI,KAAM,CACFyI,OAAQ,WACRC,YAAa,GAEjB9B,OAAQ,CACJ+B,oBAAqB,GACrBC,+BAA+B,EAC/BC,mBAAoB,GACpBC,eAAgB,GAChBC,iBAAkB,O,SD7NdvG,O,yBAAAA,I,6BAAAA,I,2BAAAA,I,2CAAAA,I,yCAAAA,I,qBAAAA,I,gBAAAA,M,cAqBAC,O,eAAAA,I,mBAAAA,I,4BAAAA,M,KElCL,IAAMuG,EAAb,WAGI,WACWC,GACT,yBADSA,OACV,KAJDC,UAIC,OAHD5G,QAGC,EALL,mDAOWA,GACY,MAAXvC,KAAKuC,GACLvC,KAAKuC,GAAK,CAACA,GAEXvC,KAAKuC,GAAGzD,KAAKyD,GAGjBA,EAAG6G,YAAYD,KAAOnJ,KAAKkJ,SAdnC,KCaaG,EAAb,WAgBI,WAAYvL,GAAoB,yBAfhCiE,kBAe+B,OAd/BqH,YAA2B,IAAIH,EAAYjJ,MAcZ,KAb/B0B,cAa+B,OAZ/B4H,YAY+B,OAX/BpB,0BAW+B,OAV/BqB,cAU+B,OAT/BC,UAS+B,OAR/BC,eAQ+B,OAP/BC,WAO+B,OAN/BC,mBAM+B,OAL/BC,6BAK+B,OAJ/BC,oBAI+B,OAH/BC,cAG+B,OAF/BC,iBAAkCC,EAG9BhK,KAAK8J,SAAWhM,EAAKgM,SACrB9J,KAAK0B,SAAW5D,EAAK4D,SACrB1B,KAAKsJ,OAASxL,EAAKwL,OACnBtJ,KAAKkI,qBAAuBpK,EAAKoK,qBACjClI,KAAKuJ,SAAWzL,EAAKyL,SACrBvJ,KAAKwJ,KAAO1L,EAAK0L,KACjBxJ,KAAKyJ,UAAY3L,EAAK2L,UACtBzJ,KAAK2J,cAAgB7L,EAAK6L,cAC1B3J,KAAK4J,wBAA0B9L,EAAK8L,wBACpC5J,KAAK+B,aAAejE,EAAKiE,aACzB/B,KAAK6J,eAAiB/L,EAAK+L,eAC3B7J,KAAK0J,MAAQ5L,EAAK4L,MA5B1B,uDA8CeO,GACPjK,KAAKoJ,YAAYc,OAAOD,KA/ChC,8BAkDYE,GAEAnK,KAAKsJ,QAAUtJ,KAAKoK,eAKxBpK,KAAKqK,UAAUF,EAAwBG,wBAzD/C,gCA4DcC,GACNvK,KAAK+B,aAAayI,OAAOxK,MACzBA,KAAK+B,aAAewI,EACpBA,EAAMzL,KAAKkB,QA/DnB,+BAkEaqB,GACDrB,KAAKyK,kBAILzK,KAAK6J,eAAea,cAAgBhI,EAAiBiI,OAQrD3K,KAAK8J,SACL9J,KAAKqK,UAAUrK,KAAKyJ,WAKpBzJ,KAAKyJ,WACLzJ,KAAKqK,UAAUrK,KAAKyJ,WAdfpI,EAAU0C,SAAS6G,QACpB5K,KAAKqK,UAAUhJ,EAAU0C,SAASuG,yBAzElD,qCA2FQ,IAAItK,KAAKyK,kBAILzK,KAAKoK,eAILpK,KAAK4J,wBAAwBxN,QAAU,EAAG,CAK1C,IAJA,IAAII,EAAQC,KAAKC,MACbD,KAAKwF,SAAWjC,KAAK4J,wBAAwBxN,QAE7CyO,EAAQ,EAER7K,KAAK4J,wBAAwBpN,GAAOoO,QACpCC,EAAQ7K,KAAK4J,wBAAwBxN,QAErCI,GAASA,EAAQ,GAAKwD,KAAK4J,wBAAwBxN,OACnDyO,IAIAA,IAAU7K,KAAK4J,wBAAwBxN,QACvC4D,KAAKqK,UAAUrK,KAAK4J,wBAAwBpN,OAlH5D,+BAwHYwD,KAAKyK,iBAITzK,KAAKqK,UAAUrK,KAAKwJ,QA5H5B,mCA+HiB9J,GACLM,KAAKyK,iBAITzK,KAAKqK,UAAU3K,EAAS4K,wBApIhC,oCAuIkBjJ,GACNrB,KAAKyK,kBAKJpJ,EAAU0C,SAAS6G,QACpB5K,KAAK6J,eAAea,cAAgBhI,EAAiBiI,QAOpDtJ,EAAU0C,SAAS6G,QACpBnO,KAAKwF,SAAWjC,KAAKkI,qBAErBlI,KAAK8K,aAAazJ,EAAU0C,UAI3B/D,KAAKoK,cAGNpK,KAAK6J,eAAea,cAAgBhI,EAAiBiI,QAEjDlO,KAAKwF,SAAWjC,KAAK0J,MAAMnB,8BAC3BvI,KAAK+K,eALT/K,KAAK+K,eAbL/K,KAAK8K,aAAazJ,EAAU0C,aAhJxC,8BAuKYkD,EAAmByC,GACvB,IAAIsB,EAAS,EACThL,KAAK6J,eAAea,cAAgBhI,EAAiBuI,aACrDD,EAAStB,EAAMzB,+BAGnBjI,KAAK0B,SC3LN,SAAoBA,EAAoBuF,EAAmB+D,GAC9D,GAAItJ,GAAYe,EAASyI,YACrB,OAAOxJ,EAGX,GAAIA,IAAae,EAAS0I,YACtB,GAAI1O,KAAKwF,SAAWgF,EAAQQ,yBAA2BuD,EACnD,OAAOvI,EAAS2I,wBAEjB,GAAI1J,IAAae,EAAS2I,oBAC7B,GAAI3O,KAAKwF,SAAWgF,EAAQO,wBAA0BwD,EAClD,OAAOvI,EAAS4I,uBAEjB,GAAI3J,IAAae,EAAS4I,mBAC7B,GAAI5O,KAAKwF,SAAWgF,EAAQM,YAAcyD,EACtC,OAAOvI,EAAS6I,aAEjB,GAAI5J,IAAae,EAAS6I,SACzB7O,KAAKwF,SAAWgF,EAAQE,SAAW6D,EACnC,OAAOvI,EAAS8I,KAIxB,OAAI9O,KAAKwF,SAAWgF,EAAQK,gBACjB7E,EAAS+I,UAGb9J,EDgKa+J,CAAWzL,KAAK0B,SAAUuF,EAAS+D,GAC/ChL,KAAK0B,WAAae,EAAS6I,QACvBtL,KAAK6J,eAAea,aAAehI,EAAiBiI,SACpD3K,KAAK6J,eAAea,YAAchI,EAAiBiI,OACnD3K,KAAKkI,qBAAuB,GAEzBlI,KAAK0B,WAAae,EAAS4I,oBAClCrL,KAAKkI,qBAAuBlI,KAAK0J,MAAMlB,mCApLnD,oCAgCQ,OACIxI,KAAK6J,eAAea,YAAc,GAClC1K,KAAK0B,WAAae,EAAS8I,OAlCvC,6BAuCQ,OAAOvL,KAAK0B,WAAae,EAAS8I,OAvC1C,sCA2CQ,OAAOvL,KAAK6J,eAAea,cAAgBhI,EAAiBuI,YAAcjL,KAAK0B,WAAae,EAAS8I,OA3C7G,gCAyLQ,OAAOvL,KAAK0B,UAAYe,EAAS2I,uBAzLzC,K,QEbaM,GAAb,WAEI,WACWlP,EACAkD,EACAiM,GACR,yBAHQnP,QAGT,KAFSkD,WAET,KADSiM,MACT,KALKC,YAKL,EACE5L,KAAK4L,OAAS,IAAIC,IAP1B,iDAUSC,GACD9L,KAAK4L,OAAOG,IAAID,KAXxB,4BAcUvB,GACF,IAAK,IAAIyB,EAAKzB,EAAMqB,OAAOK,SAAUC,EAAkB,KAA+B,OAAxBA,EAAIF,EAAGG,OAAOxO,QACxEuO,EAAK7B,UAAUrK,MACfA,KAAK4L,OAAOG,IAAIG,GAGpB3B,EAAMqB,OAAOQ,UApBrB,6BAuBWN,GACH9L,KAAK4L,OAAOS,OAAOP,KAxB3B,8BA4BQ9L,KAAK4L,OAAOQ,UA5BpB,gCA+BcE,GACNtM,KAAK4L,OAAOW,QAAQD,KAhC5B,6BAoCQ,OAAOtM,KAAK4L,OAAOrN,OApC3B,6BAwCQ,OAAOyB,KAAK4L,OAAOrN,MAAQyB,KAAK2L,QAxCxC,KA4CalM,GAAb,WAII,WAAmBvB,EAAcsO,EAAab,GAAc,IAAD,gCAAxCzN,OAAwC,KAH3DkC,YAG2D,OAF3DqM,mBAE2D,OAD3DC,eAAyB,EACkC,KA2B3DpC,mBAAqB,WACjB,GAAI,EAAKM,OACL,MAAM,IAAI+B,MAGd,OAAO,EAAKvM,OAAO,EAAKsM,iBAhC+B,KAmC3DE,YAAc,WACV,OAAO,EAAKxM,OAAO3D,KAAKC,MAAMD,KAAKwF,SAAW,EAAK7B,OAAOhE,UAnC1D4D,KAAKI,OAAS,GACd,IAAK,IAAIxB,EAAI,EAAGA,EAAI4N,EAAK5N,IACrBoB,KAAKI,OAAOtB,KAAK,IAAI4M,GAAM9M,EAAGoB,KAAM2L,IAGxC3L,KAAKyM,cAAgBd,EAAMa,EAVnC,sDAacF,GAAqC,IAAD,uBAC1C,YAAoBtM,KAAKI,OAAzB,+CAAiC,SACvByM,UAAUP,IAFsB,qFAblD,yCAoBQtM,KAAK0M,eAAiB,IApB9B,6BAwBQ,KAAO1M,KAAKI,OAAOhE,OAAS4D,KAAK0M,gBAAkB1M,KAAKI,OAAOJ,KAAK0M,gBAAgB9B,QAChF5K,KAAK0M,iBAGT,OAAO1M,KAAK0M,gBAAkB1M,KAAKI,OAAOhE,SA5BlD,iCA4CQ,IAAI0Q,EAAM,EADG,uBAEb,YAAoB9M,KAAKI,OAAzB,+CAAiC,CAC7B0M,GAD6B,QAChBlB,OAAOrN,MAHX,kFAMb,OAAOuO,MAjDf,KAqDaC,GAAb,YAGI,WAAYC,GAAmC,IAAD,uBAC1C,4CAAM,SAAU,EAAG,KAHhB9O,KAAe,SAEwB,EADtC+O,UAAoB,EAGxB,IAAIzQ,EAAQ,EAF8B,uBAG1C,YAAgCwQ,EAAhC,+CACI,IAD2C,IAAD,yBAAlCR,EAAkC,KAA7BU,EAA6B,KACjCtO,EAAI,EAAGA,EAAI4N,EAAK5N,IACrB,EAAKwB,OAAOtB,KAAK,IAAI4M,GAAMlP,EAAV,eAAuB0Q,IACxC1Q,IANkC,2FAHlD,gFAmBQ,OAJIwD,KAAKI,OAAOJ,KAAKiN,WAAWrC,QAC5B5K,KAAKiN,YAGFjN,KAAKI,OAAOJ,KAAKiN,eAnBhC,GAAkCxN,IChGrB0N,GAAb,YAGI,WACWzD,EACAvF,EACPqI,EACAb,GACD,IAAD,8BACE,4CAAM,WAAYa,EAAKb,KALhBjC,QAIT,EAHSvF,aAGT,EAPFjG,KAAO,WAOL,EANFkP,QAAwB,GAMtB,EAgCFC,WAAa,SAACC,GACNA,EAAOzD,eAAe0D,aAElBD,EAAOzD,eAAea,cACtBhI,EAAiBuI,WAEbxO,KAAKwF,SAAW,EAAKyH,MAAM1B,uBAC3BsF,EAAO5L,SAAWe,EAAS+I,WAExB/O,KAAKwF,SAAW,EAAKyH,MAAM3B,qBAClCuF,EAAO5L,SAAWe,EAAS+I,WAE3B8B,EAAO5L,WAAae,EAAS+I,YAC7B8B,EAAOzD,eAAiB,CACpB0D,aAAa,EACbC,aAAa,EACb9C,YAAahI,EAAiB+K,MAElCH,EAAOpF,qBAAuB,EAAKwB,MAAMxB,qBACzCoF,EAAOI,WAEJJ,EAAOzD,eAAe2D,aACzB/Q,KAAKwF,SAAW,EAAKyH,MAAM5B,cAC3BwF,EAAOzD,eAAe0D,aAAc,GAKxCD,EAAO5L,UAAYe,EAAS4I,mBAC5BiC,EAAOvL,aAAarC,WAAa,EAAKyE,aAEtCmJ,EAAOzD,eAAe2D,aAAc,EACpCF,EAAOpF,qBAAuB,EAC9B,EAAKyF,YAAYL,KAjEvB,EARN,oEAaQtN,KAAK6M,UAAU7M,KAAKqN,YACpBrN,KAAKmE,WAAW0I,UAAU7M,KAAKqN,cAdvC,kCA+BgBC,GACJtN,KAAKmE,WAAWyG,OAChB0C,EAAOzD,eAAea,YAAchI,EAAiBiI,QAErD2C,EAAOzD,eAAea,YAAchI,EAAiBuI,WACrDqC,EAAOjD,UAAUrK,KAAKmE,WAAWmG,yBApC7C,6BAkBQ,KAAOtK,KAAK0M,eAAiB1M,KAAKI,OAAOhE,QACrC,GAAK4D,KAAKoN,QAAQpN,KAAK0M,gBAAgBkB,UAEhC,KAAI5N,KAAKI,OAAOJ,KAAK0M,gBAAgB9B,OAGxC,MAFA5K,KAAK0M,sBAFL1M,KAAK0M,iBAQb,OAAO1M,KAAK0M,gBAAkB1M,KAAKI,OAAOhE,WA5BlD,GAA8BqD,ICajBmD,GAAb,WAUI,WAAmB8G,GAAoB,yBAApBA,QAAmB,KATtCmE,QAA4B,GASU,KARtC5G,aAQsC,OAPtC5F,eAOsC,OANtC/D,cAMsC,OALtCmL,yBAKsC,OAJtCrH,iBAIsC,OAHtChE,WAAqB,EAGiB,KAFtC0Q,mBAAiC,GAG7B9N,KAAKyI,oBAAsBiB,EAAMjB,oBACjCzI,KAAKiH,QAAUyC,EAAMzC,QACrBjH,KAAKoB,YAAc,GAHe,2BAIlC,YAAgCsI,EAAMhC,OACjCC,6BADL,+CACmC,CAAC,IAAD,yBADvB6E,EACuB,KADlBU,EACkB,KAC/BlN,KAAK5C,YAAcoP,EAAMU,GANK,kFASlC,IAAM/I,EAAa,IAAI1E,GACnB,aACAiK,EAAM7B,SAASS,iBACf,GAGJtI,KAAKqB,UAAY,CACb8C,aACAD,OAAQ,IAAI6I,GAAarD,EAAMhC,OAAOC,8BACtC1D,gBAAiB,IAAIxE,GACjB,kBACAO,KAAK5C,WAAa,GAClB,IAEJ2G,SAAU,IAAIoJ,GACVzD,EAAM7B,SACN1D,EACAuF,EAAM7B,SAASM,UACf,IAEJrE,SAAU,IAAIrE,GAAS,WAAYO,KAAK5C,WAAa,GAAI,IACzD4G,KAAM,IAAIvE,GAAS,OAAQO,KAAK5C,WAAa,GAAI,IACjDgH,SAAU,IAAI3E,GAAS,WAAY,EAAG,MAG1C,IAAK,IAAIb,EAAI,EAAGA,EAAIoB,KAAK5C,WAAYwB,IAAK,CACtC,IAAM4K,EAAOxJ,KAAKqB,UAAU6C,OAAO6J,mBAC7BzE,EAAS7M,KAAKwF,SAAWyH,EAAM7C,OAAOkC,eACtCtH,EAAa,IAAI4H,EAAW,CAC9BI,eAAWO,EACXF,UAAU,EACVJ,MAAOA,EAAMjI,WACbM,aAAcyH,EACdA,OACAF,SACA5H,SAAUe,EAASyI,YACnBtB,wBAAyBoE,MAAMtE,EAAM7C,OAAOiC,oBACvCjJ,KAAK,GACLoO,IAAIjO,KAAKqB,UAAUyC,SAAS8I,aACjC1E,qBAAsBlI,KAAK0J,MAAM7B,SAASK,qBAC1CqB,UAAU,EACVI,mBAAeK,EACfH,eAAgB,CACZ0D,aAAa,EACb7C,YAAahI,EAAiB+K,KAC9BD,aAAa,KAGrBhE,EAAK1K,KAAK2C,GACVzB,KAAKoB,YAAYtC,KAAK2C,GAG1BzB,KAAKkO,uBACL,IAAK,IAAItP,EAAI,EAAGA,EAAIoB,KAAK5C,WAAYwB,IAAK,CACtC,IAAM6K,EACFhN,KAAKwF,SAAWyH,EAAM7C,OAAOmC,sBACvBgB,EACAhK,KAAKqB,UAAU2C,KAAKsG,qBAC9BtK,KAAKoB,YAAYxC,GAAG6K,UAAYA,EAC5BA,GACAA,EAAU3K,KAAKkB,KAAKoB,YAAYxC,IAIxCoB,KAAKqB,UAAU2C,KAAK5D,OAAOmM,SAAQ,SAAC4B,GAAD,OAAOA,EAAE/B,WAC5CpM,KAAKkO,uBAEL,IADA,IAAME,EAAS1E,EAAM7B,SAASM,UACrBvJ,EAAI,EAAGA,EAAIwP,EAAQxP,IACxBoB,KAAKoB,YAAYxC,GAAGkL,UAAW,EAC/B9J,KAAKoB,YAAYxC,GAAG6K,UAAYzJ,KAAKqB,UAAU0C,SAAS3D,OAAOxB,GAC/DoB,KAAKqB,UAAU0C,SAASqJ,QAAQtO,KAAKkB,KAAKoB,YAAYxC,IAG1DoB,KAAK1C,SAAW,CACZC,IAAK,EACLC,MAAO,GA9FnB,oDAmGQwC,KAAKkO,uBACL,IAAK,IAAItP,EAAI,EAAGA,EAAIoB,KAAK0J,MAAMzJ,KAAK0I,YAAa/J,IAC7CoB,KAAKoB,YAAYxC,GAAG8C,SAAWe,EAAS0I,aArGpD,iCAyGgB,IAAD,uBACP,YAAiBnL,KAAKoB,YAAtB,+CAAmC,SAC5BiN,SAASrO,KAAKqB,YAFd,qFAzGf,2CA+GyBiN,GACjBtO,KAAK8N,mBAAmBhP,KAAKwP,KAhHrC,8BAqHQ,IADA,IAAMlO,EAASJ,KAAKqB,UAAU6C,OAAO9D,OAC5BxB,EAAI,EAAGA,EAAIwB,EAAOhE,OAAQwC,IAC/B,GAAyB,IAArBwB,EAAOxB,GAAGxC,QAIVK,KAAKwF,SAAWjC,KAAK0J,MAAMhC,OAAOE,UAAW,CAC7C,IAAM2G,GAAK3P,EAAInC,KAAKC,MAAsB,GAAhBD,KAAKwF,UAAiB,GAAKjC,KAAKqB,UAAU6C,OAAO9D,OAAOhE,OAClFgE,EAAOxB,GAAG4P,MAAMpO,EAAOmO,OA5HvC,mCAiIkB,IAAD,uBACT,YAAiBvO,KAAKoB,YAAtB,+CAAmC,SAC5BsM,UAFE,kFAKT1N,KAAKyO,UAtIb,sCAyIqB,IAAD,uBACZ,YAAiBzO,KAAKoB,YAAtB,+CAAmC,SAC5BsN,cAAc1O,KAAKqB,YAFd,qFAzIpB,kCA+IgByK,EAAgB6C,EAA0BC,GAClD,GAAkB9C,EAAGpK,SPtIP,EOsId,CPvID,IO2IKmN,EAAO7O,KAAK0J,MAAMzC,QAAQI,eAC1BuH,IAEIC,GADA/C,EAAGhC,SACI9J,KAAK0J,MAAM7B,SACbO,wCAOb,IACI,IAAI0G,EAAOH,EAAO1C,SAAUhC,EAAQ,KACnCA,EAAQ6E,EAAK3C,OAAOxO,OAGjBsM,EAAMvI,WAAae,EAASyI,cAI5B0D,GAAc3E,EAAMH,WACpB+E,EAAO7O,KAAK0J,MAAM7B,SACbO,uCAGL3L,KAAKwF,SAAW4M,IAChB5E,EAAMvI,SAAWe,EAAS0I,WAC1BW,EAAGiD,WAAW9E,QA/K9B,+BAoLc,IAAD,uBACL,YAAiBjK,KAAKoB,YAAtB,+CAAmC,CAAC,IAAzB0K,EAAwB,QAC3BA,EAAGkD,QAIPhP,KAAKiP,YACDnD,EACAA,EAAG/J,aAAa6J,OAChBE,EAAG/J,aAAarC,WAAaM,KAAKqB,UAAU0C,UACxC+H,EAAG/J,aAAarC,WAAaM,KAAKqB,UAAU8C,aAVnD,qFApLb,uCAmMsB,IAAD,uBACb,YAAiBnE,KAAKoB,YAAtB,+CAAmC,CAAC,IAAzB0K,EAAwB,QAC/BA,EAAGoD,QAAQlP,KAAK0J,MAAMzC,QAASjH,KAAK0J,MAAM7B,UAEtCiE,EAAGpK,WAAae,EAAS8I,MACzBO,EAAGzB,UAAUrK,KAAKqB,UAAU+C,SAAShE,OAAO,KALvC,qFAnMrB,gCA6Me,IAAD,uBACN,YAAiBJ,KAAKoB,YAAtB,+CAAmC,SAC5B+N,QAAQnP,KAAKqB,UAAU4C,kBAFxB,qFA7Md,2CAoNQjE,KAAK1C,SAASE,QACVwC,KAAK1C,SAASE,QAAUwC,KAAKyI,sBAC7BzI,KAAK1C,SAASC,MACdyC,KAAK1C,SAASE,MAAQ,KAvNlC,yCA2NwB,IAAD,uBACf,YAAuB4R,OAAOnD,OAAOjM,KAAKqB,WAA1C,+CAAoE,SACvDgO,oBAFE,qFA3NvB,6BAkOQrP,KAAKsP,iBACLtP,KAAKqP,mBACLrP,KAAKuP,UACLvP,KAAKkK,SACuB,IAAxBlK,KAAK1C,SAASE,MACdwC,KAAKwP,WACExP,KAAK1C,SAASE,QAAUwC,KAAKyI,oBAAsB,EAC1DzI,KAAKyP,aAELzP,KAAK0O,gBAGT1O,KAAKqB,UAAU0C,SAAS2L,OACxB1P,KAAKkK,SACLlK,KAAK2P,qBACL3P,KAAKkO,uBACLlO,KAAK6N,QAAQ/O,KAAKkB,KAAK4P,eAjBpB,2BAkBH,YAAuB5P,KAAK8N,mBAA5B,+CAAgD,EAC5CQ,EAD4C,SACnCtO,OAnBV,qFAjOX,8BAyPQ,IAAM6P,EAAO7P,KAAK4P,cAClB,OACIC,EAAKzS,WAAWiO,kBACZwE,EAAKzS,WAAWgO,mBAChByE,EAAKzS,WAAWkO,QAChBuE,EAAKzS,WAAW+N,aACpB,IA/PZ,6CAwQQ,IAAK,IAAIvM,EAAI,EAAGA,EAAIoB,KAAKoB,YAAYhF,OAAQwC,IAAK,CAC9C,IAAMpC,EAAQC,KAAKC,MAAMD,KAAKwF,SAAWjC,KAAKoB,YAAYhF,QADZ,EAEG,CAC7C4D,KAAKoB,YAAY5E,GACjBwD,KAAKoB,YAAYxC,IAFpBoB,KAAKoB,YAAYxC,GAF4B,KAExBoB,KAAKoB,YAAY5E,GAFO,QAxQ1D,oCAkRQ,IAAMnB,EAAsB,CACxBmD,qBAAsB,CAClB2F,WAAY,EACZC,SAAU,EACVN,SAAU,EACVC,SAAU,EACVG,OAAQ,EACRD,gBAAiB,EACjBD,KAAM,GAEV5G,WAAY,CACRmO,KAAM,EACNJ,WAAY,EACZE,kBAAmB,EACnBD,mBAAoB,EACpBI,UAAW,EACXF,QAAS,EACTJ,YAAa,GAEjB5L,YAAa,CACTwQ,MAAO,EACPnF,OAAQ,EACRM,WAAY,EACZ8E,UAAW,EACXC,UAAW,GAEfC,OAAQ,CACJC,UAAW,EACX3E,KAAM,EACN4E,IAAK,EACLL,MAAO,GAEXxS,SAAS,eACF0C,KAAK1C,UAEZkC,GAAI,GAGF4Q,EAAoBpQ,KAAKoB,YAAY9E,QACvC,SAACkE,GAAD,OAAOA,EAAEqJ,eAAe0D,eAE5BlS,EAAImE,GAAK4Q,EAAkBhU,OACvBgU,EAAkBC,QACd,SAAC3K,EAAM4K,GAAP,OACI5K,GAAQ4K,EAAIlH,YAAY7G,GAAK+N,EAAIlH,YAAY7G,GAAGnG,OAAS,KAC7D,GACCgU,EAAkBhU,OAAU,EA/CL,2BAgDhC,YAAiB4D,KAAKoB,YAAtB,+CAAmC,CAAC,IAAzB0K,EAAwB,QAC3BA,EAAGhC,WACHzO,EAAI4U,OAAOH,QACPhE,EAAGkD,QACH3T,EAAI4U,OAAO1E,OAEXO,EAAGpK,UAAYe,EAAS0I,YACxB9P,EAAI4U,OAAOE,MAEXrE,EAAG8B,WACHvS,EAAI4U,OAAOC,aAInB7U,EAAI+B,WAAWqF,EAASqJ,EAAGpK,YAAc,EACpCoK,EAAGkD,SACAlD,EAAGjC,eAAea,cAAgBhI,EAAiBiI,SACnDtP,EAAIiE,YAAYwQ,QAChBzU,EAAIiE,YAAYqL,UAIhBmB,EAAGjC,eAAea,cAClBhI,EAAiBuI,aAEjB5P,EAAIiE,YAAYwQ,QAChBzU,EAAIiE,YAAY2L,cAGhBa,EAAGjC,eAAe0D,cAClBlS,EAAIiE,YAAYyQ,YAChB1U,EAAIiE,YAAY0Q,aAGhBlE,EAAGjC,eAAe2D,aAClBnS,EAAIiE,YAAY0Q,cAnFI,kFAwFhC,IAAK,IAAMtS,KAAOsC,KAAKqB,UACnBhG,EAAImD,qBAAqBd,IAAQsC,KAAKqB,UAAU3D,GAAKN,WAGzD,OAAO/B,MA7Wf,K,2UCVA,IAAMkV,GAAmBrV,IAAOC,IAAV,MAWhBqV,GAAgB,CAClBvJ,QAAS,CACLC,SAAU,SACVC,SAAU,SACVC,WAAY,SACZC,eAAgB,SAChBnJ,KAAM,SACNoJ,gBAAiB,SACjBC,YAAa,SACbC,wBAAyB,SACzBC,yBAA0B,UAE9BC,OAAQ,CACJE,UAAW,UAEfC,SAAU,CACNC,YAAa,SACbC,mBAAoB,SACpBC,qBAAsB,SACtBC,8BAA+B,SAC/BC,qBAAsB,SACtBC,UAAW,SACXC,sCAAuC,SACvCC,8BAA+B,SAC/BC,iBAAkB,UAEtB7G,WAAY,CACR8G,6BAA8B,SAC9BC,gCAAiC,UAErCC,oBAAqB,SACrB5B,OAAQ,CACJ+B,oBAAqB,SACrBC,8BAA+B,SAC/BC,mBAAoB,SACpBC,eAAgB,SAChBC,iBAAkB,WAwBbyH,GAA0C,SAAC5N,GAAkB,IAAD,EACvCpH,IAAMC,UAAS,GADwB,mBAC9DgV,EAD8D,KACrDC,EADqD,OAEjClV,IAAMC,SACrCkV,KAAKC,MAAMC,aAAaC,QAAQ,iBAC7B/J,GAJ6D,mBAE9DgK,EAF8D,KAElDC,EAFkD,KAM/DC,EAAiBzV,IAAM0V,aAAY,WACrCR,GAAW,KACZ,IACGS,EAAkB3V,IAAM0V,aAAY,WACtCR,GAAW,KACZ,IACH,SAASU,EAAgBC,GACrB,OAAO,SAAC3T,GAAD,OACHsT,EA9BQ,SAACM,EAAYC,EAAgB7T,GAI7C,IAHA,IAAM8T,EAAMrC,OAAOsC,OAAO,GAAIH,GAC1BI,EAASF,EACTG,EAAO,GACFhT,EAAI,EAAGA,EAAI4S,EAAKpV,OAAQwC,IAC7BgT,EAAOJ,EAAK5S,GACRA,IAAM4S,EAAKpV,OAAS,IACpBuV,EAAOC,GAAQxC,OAAOsC,OAAO,GAAIC,EAAOC,IACxCD,EAASF,EAAIG,IAKrB,OADAD,EAAOC,GAAQjU,EACR8T,EAiBeI,CAAYb,EAAYM,EAAQ3T,KAEtD,IAAMmU,EAAWrW,IAAM0V,aAAY,WAC/BtO,EAAMkP,UAAUf,GAChBF,aAAakB,QAAQ,cAAepB,KAAKqB,UAAUjB,IACnDI,MACD,CAACvO,EAAOmO,EAAYI,IACjBc,EAAW,GACjB,IAAK,IAAMC,KAAc3B,GAAe,CACpC,IAAM4B,EAAU5B,GAAc2B,GAE9B,IAAK,IAAME,KADXH,EAASpT,KAAK,4BAAKqT,IACOC,EAAS,CAC/B,IAAME,EAAcF,EAAQC,GAC5B,GAAoB,WAAhBC,EAA0B,CAC1B,IAAMC,EAAIvB,EAAWmB,GAAYE,GAC3BG,EAAa,IAAND,EAAU9V,KAAKC,MAAMD,KAAKgW,MAAMF,IAAM,EACnDL,EAASpT,KACL,kBAACyR,GAAD,KACI,8BAAQ8B,GACR,kBAAC,KAAD,CACI3U,IAAKyU,EAAa,IAAMG,EACxBI,IAAK,EACL/G,IAAK,IACL6G,KAAM/V,KAAKkW,IAAI,GAAIH,GACnBI,SAAUvB,EAAgB,CACtBc,EACAE,IAEJQ,aAAcN,UAIH,WAAhBD,GACPJ,EAASpT,QAIrB,OACI,6BACI,kBAAC,IAAD,CACIgU,QAAS5B,EACTnS,MAAO,CAAEgU,OAAQ,WACjBC,KAAM,kBAACC,GAAA,EAAD,OAHV,YAOA,kBAAC,KAAD,CACIC,MAAO,UACPC,KAAMrB,EACNsB,SAAUhC,EACVV,QAASA,GAERwB,GAdT,M,mVCvGAmB,GAAWC,KAAXD,OAERA,GAAOE,cAAc,MAAOvO,GAE5BqO,GAAOG,SAAS,OAEhB,IAAMC,GAAY,CAAC,QAAS,OAAQ,SAC9BC,GAAoBxY,IAAOC,IAAV,MA0JRwY,G,YArIX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KATV3Q,MAAQ,IAAI4Q,GAAWjD,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB/J,GAQxD,EAPlB8M,SAAmB,EAOD,EANlBvC,WAMkB,IAFlBwC,UAAoB,EAEF,EADlBC,cACkB,IAclBC,SAAW,WACP,GAAK,EAAKH,QAAV,CAIA,GAAI,EAAKC,UAAY,IACjB,EAAKG,SAAS,CAAEpW,KAAM,EAAKmF,MAAM4K,UACjC,EAAKkG,UAAY,MACd,CACH,IAAK,IAAInV,EAAI,EAAGA,EAAI,GAAIA,IACpB,EAAKqE,MAAMuP,OAGf,EAAKuB,WAAa,GAGtBI,WAAW,EAAKF,SAAU,KA9BZ,EAiClBzB,KAAO,WACH,EAAK4B,QACL,EAAKnR,MAAMuP,OACXlP,QAAQC,IAAI,EAAKN,MAAM3F,UACvB,EAAK0W,SAASpQ,QAAQ4O,OACtB,EAAK0B,SAAS,CAAEpW,KAAM,EAAKmF,MAAM4K,WAtCnB,EAyClBwG,KAAO,WACH,EAAK7R,QACL,EAAKyR,YA3CS,EA8ClBK,MAAQ,WACJ,EAAKrR,MAAQ,IAAI4Q,GAAW7M,GAC5B,EAAK/D,MAAMT,QACX,EAAK0R,SAAS,CAAEpW,KAAM,KACtB,EAAKsW,SAlDS,EAqDlB5R,MAAQ,WACJ,EAAK0R,SAAS,CAAEJ,SAAS,IACzB,EAAKA,SAAU,GAvDD,EA0DlBM,MAAQ,WACJ,EAAKF,SAAS,CAAEJ,SAAS,IACzB,EAAKA,SAAU,GA5DD,EA+DlBhC,SAAW,SAACpI,GACR,EAAKzG,MAAMyG,MAAQA,GA9DnB,EAAK6H,MAAQ,CACTzT,KAAM,GACNgW,SAAS,GAEb,EAAK7Q,MAAMT,QACX,EAAKwR,SAAWvY,IAAMkI,YAPR,E,kFAWd4Q,SAASC,KAAKzV,MAAM0V,gBAApB,cAA6CC,KAA7C,O,+BAyDA,IAAM3V,EAAQ,CACVwH,UAAW,qCACXtI,QAAS,OAELX,EAAa0C,KAAKiD,MAAlB3F,SACR,OACI,kBAAC,IAAD,CAAKqX,UAAW,OAAQC,QAAS,UAC7B,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAI/V,MAAOA,GACxB,kBAAC,EAAD,CAAOkE,MAAOjD,KAAKiD,MAAO6B,IAAK9E,KAAKgU,WACpC,kBAAC,IAAD,KACMhU,KAAKuR,MAAMuC,QAST,kBAAC,IAAD,CACIhB,QAAS9S,KAAKoU,MACdrV,MAAO,CAAEgU,OAAQ,0BACjBC,KAAM,kBAAC+B,EAAA,EAAD,OAHV,SARA,kBAAC,IAAD,CACIjC,QAAS9S,KAAKqU,KACdtV,MAAO,CAAEgU,OAAQ,0BACjBC,KAAM,kBAACgC,EAAA,EAAD,OAHV,QAgBJ,kBAAC,IAAD,CACIlC,QAAS9S,KAAKwS,KACdzT,MAAO,CAAEgU,OAAQ,UACjBC,KAAM,kBAACiC,EAAA,EAAD,OAHV,QAOA,kBAAC,IAAD,CACInC,QAAS9S,KAAKsU,MACdvV,MAAO,CAAEgU,OAAQ,WACjBC,KAAM,kBAACkC,EAAA,EAAD,OAHV,SAOA,kBAAC,GAAD,CAASnD,UAAW/R,KAAK8R,aAGjC,kBAAC,IAAD,CAAK+C,GAAI,EAAGC,GAAI,GAAI/V,MAAOA,GACvB,kBAAC2U,GAAD,aACUpW,EAASC,IACf,6BAFJ,SAGWkW,GAAUnW,EAASE,SAIlC,kBAAC,IAAD,CAAKqX,GAAI,EAAGC,GAAI,GAAI/V,MAAOA,GACvB,yBAAK4V,UAAU,UACX,kBAAC,EAAD,CAAiBtZ,IAAK2E,KAAKuR,MAAMzT,OACjC,kBAAC,EAAD,CAAsBzC,IAAK2E,KAAKuR,MAAMzT,OACtC,kBAAC,EAAD,CAAazC,IAAK2E,KAAKuR,MAAMzT,OAC7B,kBAAC,EAAD,CAAIzC,IAAK2E,KAAKuR,MAAMzT,c,GAtI1BrC,IAAMsJ,WClCJoQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASlB,SAASmB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBE7InBC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.787d0ee8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ChartContainer = styled.div`\n    width: 100%;\n    max-width: 600px;\n    margin: 0 36px;\n    position: relative;\n    border-radius: 8px;\n\n\n    h3 {\n        text-align: center;\n        position: relative;\n        left: 60px;\n        color: #ccc;\n        cursor: default;\n        margin: 0;\n    }\n\n    .slick-prev:before, .slick-next:before {\n        color: #aaa;\n    }\n\n    .slick-prev {\n        left: 4px;\n        z-index: 2;\n    }\n\n    .slick-next {\n        z-index: 2;\n        right: -12px;\n    }\n\n    .slick-dots {\n        bottom: 0px;\n        right: -40px;\n    }\n\n    .slick-dots li button:before {\n        color: white;\n    }\n`;","\nimport React from \"react\";\n\nexport const useIncrementalProcess = (agg: any[], dv: any, foldSize: number = 1, MAX_DATA_SIZE = 1000) => {\n    const [lastAggLength, setLastAggLength] = React.useState(0);\n    const [processedData, setProcessedData] = React.useState([]);\n    const [shrinkFactor, setShrinkFactor] = React.useState(1);\n    React.useEffect(() => {\n        let old = processedData;\n        let newData;\n        if (agg.length > lastAggLength) {\n            if (agg.length < lastAggLength + shrinkFactor * 2) {\n                return;\n            }\n\n            newData = agg.slice(lastAggLength).filter((_, index) => index % shrinkFactor === 0);\n        } else {\n            old = [];\n            newData = agg;\n        }\n\n        if (old.length > MAX_DATA_SIZE) {\n            setShrinkFactor(shrinkFactor * 2);\n            old = old.filter((_, index) => Math.floor(index / foldSize) % 2 === 0)\n        }\n\n        dv.source(newData);\n        setProcessedData(old.concat(dv.rows));\n        setLastAggLength(agg.length);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [agg, agg.length]);\n\n    return processedData;\n}","import { AggregatedInfo } from \"../model/type\";\nimport React from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nimport { ChartContainer } from \"./styled\";\nimport { useIncrementalProcess } from './utils';\n\ninterface Props {\n    agg: AggregatedInfo[];\n}\n\nconst dv = new DataSet.View()\n    .transform({\n        type: \"map\",\n        callback(row) {\n            return {\n                ...row.population,\n                time:\n                    row.datetime.day +\n                    Math.floor((row.datetime.scene / 3) * 10) / 10\n            };\n        }\n    })\n    .transform({\n        type: \"fold\",\n        fields: [\n            \"susceptible\",\n            \"incubating\",\n            \"latentlyInfactious\",\n            \"exposedInfactious\",\n            \"serious\",\n            \"dead\",\n            \"recovered\"\n        ],\n        key: \"state\",\n        value: \"value\",\n        retains: [\"time\"]\n    });\n\n\nexport const StackPopulation = ({ agg }: Props) => {\n    const data = useIncrementalProcess(agg, dv, 7);\n    return (\n        <ChartContainer>\n            <h3>Ill State Distribution</h3>\n            <Chart\n                data={data}\n                forceFit\n                height={220}\n                padding={[20, 40, 40, 180]}\n            >\n                <Axis name=\"time\" />\n                <Axis name=\"value\" />\n                <Legend position={\"left\"} />\n                <Tooltip\n                    crosshairs={{\n                        type: \"cross\"\n                    }}\n                />\n                <Geom\n                    // TODO: 添加渐变色\n                    type=\"areaStack\"\n                    position=\"time*value\"\n                    color=\"state\"\n                    opacity={0.3}\n                />\n                <Geom\n                    type=\"lineStack\"\n                    position=\"time*value\"\n                    size={2}\n                    color=\"state\"\n                />\n            </Chart>\n        </ChartContainer>\n    );\n};\n","import { AggregatedInfo } from \"../model/type\";\nimport React from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nimport { useIncrementalProcess } from \"./utils\";\nimport { ChartContainer } from \"./styled\";\nimport Slider from \"react-slick\";\n\ninterface Props {\n    agg: AggregatedInfo[];\n}\n\nconst dv = new DataSet.View()\n    .transform({\n        type: \"map\",\n        callback(row) {\n            return {\n                ...row.districtDistribution,\n                ...row.datetime\n            };\n        }\n    })\n    .transform({\n        type: \"fold\",\n        fields: [\n            \"medicalBed\",\n            \"living\",\n            \"work\",\n            \"publicTransport\",\n            \"hospital\",\n            \"facility\",\n            \"cemetery\"\n        ],\n        key: \"state\",\n        value: \"value\",\n        retains: [\"day\", \"scene\"]\n    });\n\nexport const DistrictDistribution = ({ agg }: Props) => {\n    const data = useIncrementalProcess(agg, dv, 7);\n    const sceneNum = 3;\n    const charts = React.useMemo(() => {\n        const charts = [];\n        for (let i = 0; i < sceneNum; i++) {\n            const newDv = new DataSet.View().source(data).transform({\n                type: \"filter\",\n                callback(row) {\n                    return row.scene === i;\n                }\n            });\n\n            charts.push(\n                <Chart\n                    height={220}\n                    padding={[20, 40, 40, 180]}\n                    data={newDv}\n                    forceFit\n                    key={i}\n                >\n                    <Axis name=\"day\" />\n                    <Axis name=\"value\" />\n                    <Legend position=\"left\" />\n                    <Tooltip\n                        crosshairs={{\n                            type: \"cross\"\n                        }}\n                    />\n                    <Geom type=\"areaStack\" position=\"day*value\" color=\"state\" />\n                    <Geom\n                        type=\"lineStack\"\n                        position=\"day*value\"\n                        size={2}\n                        color=\"state\"\n                    />\n                </Chart>\n            );\n        }\n        return charts;\n    }, [data]);\n\n    return (\n        <ChartContainer style={{ padding: \"0 12px 12px 12px\" }}>\n            <h3>Disctrict Distribution ({sceneNum} Scenes)</h3>\n            <Slider\n                dots\n                infinite\n                speed={300}\n                slidesToScroll={1}\n                slidesToShow={1}\n                arrows={true}\n            >\n                {charts}\n            </Slider>\n        </ChartContainer>\n    );\n};\n","import { AggregatedInfo } from \"../model/type\";\nimport React from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nimport { ChartContainer } from \"./styled\";\nimport { useIncrementalProcess } from './utils';\n\ninterface Props {\n    agg: AggregatedInfo[];\n}\n\nconst dv = new DataSet.View()\n    .transform({\n        type: \"map\",\n        callback(row) {\n            return {\n                ...row.quarantined,\n                time:\n                    row.datetime.day +\n                    Math.floor((row.datetime.scene / 3) * 10) / 10\n            };\n        }\n    })\n    .transform({\n        type: \"fold\",\n        fields: [\"confirmed\", \"suspected\"],\n        key: \"state\",\n        value: \"value\",\n        retains: [\"time\"]\n    });\n\n\nexport const PatientInfo = ({ agg }: Props) => {\n    const data = useIncrementalProcess(agg, dv, 2);\n    return (\n        <ChartContainer>\n            <h3>Patients</h3>\n            <Chart\n                height={220}\n                padding={[20, 40, 40, 180]}\n                data={data}\n                forceFit\n            >\n                <Axis name=\"time\" />\n                <Axis name=\"value\" />\n                <Legend position=\"left-center\" />\n                <Tooltip\n                    crosshairs={{\n                        type: \"y\"\n                    }}\n                />\n                <Geom\n                    type=\"line\"\n                    position=\"time*value\"\n                    color=\"state\"\n                    size={2}\n                />\n            </Chart>\n        </ChartContainer>\n    );\n};\n","import { AggregatedInfo } from \"../model/type\";\nimport React from \"react\";\nimport { Chart, Geom, Axis, Tooltip, } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nimport { ChartContainer } from \"./styled\";\nimport { useIncrementalProcess } from './utils';\n\ninterface Props {\n    agg: AggregatedInfo[];\n}\n\nconst dv = new DataSet.View()\n    .transform({\n        type: \"map\",\n        callback(row: AggregatedInfo) {\n            return {\n                R0: row.R0,\n                time:\n                    row.datetime.day +\n                    Math.floor((row.datetime.scene / 3) * 10) / 10\n            };\n        }\n    });\n\n\nexport const R0 = ({ agg }: Props) => {\n    const data = useIncrementalProcess(agg, dv);\n    return (\n        <ChartContainer>\n            <h3>R0</h3>\n            <Chart\n                height={220}\n                padding={[20, 40, 40, 180]}\n                data={data}\n                forceFit\n            >\n                <Axis name=\"time\" />\n                <Axis name=\"value\" />\n                <Tooltip\n                    crosshairs={{\n                        type: \"y\"\n                    }}\n                />\n                <Geom\n                    type=\"line\"\n                    position=\"time*R0\"\n                    size={2}\n                />\n            </Chart>\n        </ChartContainer>\n    );\n};\n","import { District as DistrictModel } from '../../model/District';\nimport { BoundingBox, } from '../../model/type';\nimport { MARGIN, WIDTH, HEIGHT} from './config';\n\n\nexport class District {\n    placeBoundingBoxes: BoundingBox[];\n    constructor(\n        private district: DistrictModel,\n        private bbox: BoundingBox,\n        private ctx: CanvasRenderingContext2D,\n        private name: string,\n        private fill: string = 'rgba(100, 200, 230, 0.5)',\n        private stroke: string = '',\n    ) {\n        this.init();\n    }\n\n    init() {\n        this.placeBoundingBoxes = [];\n        let curX = 6, curY = 0;\n        for (let i = 0; i < this.district.places.length; i ++) {\n            if (curX + WIDTH + 6 > this.bbox.w) {\n                curX = 6;\n                curY += MARGIN + HEIGHT;\n            }\n\n            this.placeBoundingBoxes.push({\n                h: HEIGHT,\n                w: WIDTH,\n                x: curX + this.bbox.x,\n                y: curY + this.bbox.y + 40\n            })\n\n            curX += WIDTH + MARGIN;\n        }\n    }\n\n    draw() {\n        this.ctx.save();\n        this.ctx.fillStyle = this.fill;\n        this.ctx.strokeStyle = this.stroke;\n        this.ctx.fillRect(this.bbox.x, this.bbox.y, this.bbox.w, this.bbox.h);\n        this.ctx.strokeStyle = '';\n        this.ctx.fillStyle = '#bbb';\n        this.ctx.font = \"12px Fira Code\";\n        this.ctx.fillText(this.name, this.bbox.x + 10, this.bbox.y + 20);\n        this.ctx.restore();\n\n        // draw 污渍\n    }\n\n    getPlaceBBox(index: number): BoundingBox {\n        return this.placeBoundingBoxes[index];\n    }\n}","export const MARGIN = 12;\nexport const WIDTH = 6;\nexport const HEIGHT = 10;","import { Individual as IndividualModel } from '../../model/Individual';\nimport { Drawable, Tweenable } from './Draw';\nimport { Districts, Position, } from '../../model/type';\nimport { District } from './District';\nimport TWEEN from '@tweenjs/tween.js';\n\nconst IllColors = ['blue', '#ddd', 'yellow', '#fa6', 'faa', '#a22', 'black'];\nexport class Individuals implements Drawable, Tweenable{\n    individuals: IndividualModel[];\n    positions: Position[];\n    constructor(\n        private ctx: CanvasRenderingContext2D,\n        individuals: IndividualModel[],\n        private districts: {[key in keyof Districts]: District}\n    ){\n        this.individuals = individuals.concat();\n        this.positions = this.getCurrentPosition();\n    }\n\n    draw(){\n        this.ctx.save();\n        this.ctx.globalAlpha = 0.6;\n        for (let i = 0; i < this.individuals.length; i ++) {\n            const individual = this.individuals[i];\n            this.ctx.fillStyle = IllColors[individual.illState];\n            this.ctx.beginPath();\n            this.ctx.arc(this.positions[i].x, this.positions[i].y, 2, 0, Math.PI*2);\n            this.ctx.closePath();\n            this.ctx.fill();\n        }\n\n        this.ctx.restore();\n    }\n\n    private getCurrentPosition() {\n        const positions: Position[] = [];\n        for (const individual of this.individuals) {\n            const {index, district} = individual.currentPlace;\n            const layoutDistrict: District = this.districts[district.name];\n            const {x, y, w, h} = layoutDistrict.getPlaceBBox(index);\n            positions.push({\n                x: x + Math.floor(w * Math.random()),\n                y: y + Math.floor(h * Math.random()),\n            })\n        }\n\n        return positions;\n    }\n\n    getTweenGroup() {\n        const group = new TWEEN.Group();\n        const newPos = this.getCurrentPosition();\n        for (let i = 0; i < this.individuals.length; i ++) {\n            const tween = new TWEEN.Tween(this.positions[i], group)\n                .to(newPos[i], 1000).start();\n        }\n\n        return group;\n    }\n}","import React from \"react\";\nimport styled from \"styled-components\";\nimport { DateTime, Districts } from \"../model/type\";\nimport { World as WorldModel } from \"../model/World\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { District } from \"./main/District\";\nimport { Individuals } from \"./main/Individuals\";\n\nconst Container = styled.div`\n    min-width: 700px;\n    min-height: 600px;\n    position: relative;\n`;\n\ninterface Props {\n    world: WorldModel;\n}\n\nexport class World extends React.Component<Props> {\n    datetime: DateTime;\n    canvas: React.RefObject<HTMLCanvasElement>;\n    ctx?: CanvasRenderingContext2D;\n    districts: { [key in keyof Districts]: District };\n    individuals: Individuals;\n    endTime?: number;\n    animationKey?: number;\n    world: WorldModel;\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(props: Props) {\n        super(props);\n        this.canvas = React.createRef();\n        this.world = this.props.world;\n    }\n\n    updateWorld() {\n        if (this.world !== this.props.world) {\n            this.world = this.props.world;\n            this.init();\n        }\n    }\n\n    componentDidMount() {\n        if (!this.canvas.current) {\n            return;\n        }\n\n        this.ctx = this.canvas.current.getContext(\"2d\");\n        this.init();\n    }\n\n    init() {\n        this.districts = {\n            facility: new District(\n                this.world.districts.facility,\n                { x: 200, y: 80, h: 180, w: 180 },\n                this.ctx!,\n                \"Facility\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n            hospital: new District(\n                this.world.districts.hospital,\n                { x: 200, y: 280, h: 200, w: 180 },\n                this.ctx!,\n                \"Hospital\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n            work: new District(\n                this.world.districts.work,\n                { x: 400, y: 0, h: 480, w: 300 },\n                this.ctx!,\n                \"Work\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n            publicTransport: new District(\n                this.world.districts.publicTransport,\n                { x: 200, y: 0, h: 60, w: 180 },\n                this.ctx!,\n                \"Public Transport\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n            living: new District(\n                this.world.districts.living,\n                { x: 0, y: 0, h: 480, w: 180 },\n                this.ctx!,\n                \"Residential Area\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n            medicalBed: new District(\n                this.world.districts.medicalBed,\n                { x: 0, y: 500, h: 100, w: 580 },\n                this.ctx!,\n                \"Quarantine Area\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n            cemetery: new District(\n                this.world.districts.cemetery,\n                { x: 600, y: 500, h: 100, w: 100 },\n                this.ctx!,\n                \"Cemetery\",\n                \"rgba(0, 255, 255, 0.08)\"\n            ),\n        };\n\n        this.individuals = new Individuals(this.ctx!, this.world.individuals, this.districts);\n        this.animationKey = 0;\n        this.draw(0);\n    }\n\n    draw(key: number, group?: any) {\n        if (!this.ctx) {\n            return;\n        }\n\n        this.updateWorld();\n        this.ctx.save();\n        this.ctx.translate(10, 10);\n        this.ctx.scale(0.95 * 3, 0.95 * 3);\n        this.ctx.clearRect(0, 0, 800, 800);\n        for (const key in this.districts) {\n            const dis: District = this.districts[key];\n            dis.draw();\n        }\n        this.individuals.draw();\n        this.ctx.restore();\n        if (group) {\n            group.update();\n        }\n        if (key === this.animationKey && this.endTime && new Date().getTime() < this.endTime) {\n            requestAnimationFrame(()=>this.draw(key, group));\n        }\n    }\n\n    step() {\n        this.updateWorld();\n        const group = this.individuals.getTweenGroup();\n        this.endTime = new Date().getTime() + 2000;\n        this.animationKey = Math.random();\n        this.draw(this.animationKey, group);\n    }\n\n    test = () => {\n        const position = [{ x: 0 }, { x: 100 }];\n        const grp = new TWEEN.Group();\n        new TWEEN.Tween(position, grp)\n            .to([{ x: 100 }, { x: 0 }], 2000)\n            .onUpdate((object) => {\n                console.log(object, position);\n            })\n            .start();\n        requestAnimationFrame(function anim() {\n            requestAnimationFrame(anim);\n            grp.update();\n        });\n    };\n\n    render() {\n        return (\n            <Container>\n                <canvas width={2100} height={1800} ref={this.canvas} style={{width: 700, height: 600}}/>\n            </Container>\n        );\n    }\n}\n","// TODO: patients' priorities\nimport { Hospital } from \"./Hospital\";\nimport { Place, District, LivingQuater } from \"./District\";\n\nexport interface IDisease {\n    name: string;\n    infectiousRate: number; // 健康 -> 患病\n    toLatentlyInfactiousRate: number; // 1 / 传染潜伏期\n    toExposedInfactiousRate: number; // 1 / 暴露潜伏期\n    seriousRate: number; // 病重率\n    deadRate: number; // 死亡率 （病重 -> 死亡）\n    selfRecoverRate: number;\n    cureRate: number;\n    immuneRate: number;\n}\n\nexport enum IllState {\n    recovered = 0,\n    susceptible = 1,\n    incubating = 2,\n    latentlyInfactious = 3,\n    exposedInfactious = 4,\n    serious = 5,\n    dead = 6,\n}\n\nexport function isInfectious(illState: IllState) {\n    return illState > 1;\n}\n\nexport interface BoundingBox {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n}\n\nexport enum QuanrantineState {\n    none = 0,\n    atHome = 1,\n    atHospital = 2,\n}\n\nexport interface TreatmentState {\n    quanrantine: QuanrantineState;\n    isSuspected: boolean;\n    isConfirmed: boolean;\n}\n\nexport interface IIndividual {\n    isDoctor: boolean;\n    illState: IllState;\n    treatmentState: TreatmentState;\n    hasCar: boolean;\n    visitingHospitalRate: number;\n    wearMask: boolean;\n    home: Place;\n    currentPlace: Place;\n    workPlace?: Place; // default working at home\n    hospitalPlace?: Place; // default working at home\n    targetingFacilityPlaces: Place[];\n    param: IndividualParam;\n}\n\nexport interface RegionalParam {\n    unemploymentRate: number;\n    densityOfPopulation: number;\n    doPeriodicPhysicalExamination: boolean;\n    facilityActiveRate: number; // 一个人会在几个 facility places 当中活跃\n    privateCarRate: number;\n}\n\nexport interface MedicalParam {\n    doctorNum: number;\n    cureRateInHospital: number;\n    cureRateOnMedicalBed: number;\n    deteriorateFactorOnMedicalBed: number;\n    visitingHospitalRate: number;\n    confirmRate: number;\n    medicalBedNumber: number;\n    infactiousRateBetweenDoctorAndPatient: number;\n    infactiousRateBetweenPatients: number;\n}\n\nexport interface FamilyParam {\n    familyPopulationDistribution: [number, number][];\n    partyRate: number;\n}\n\nexport interface IndividualParam {\n    goOutRateWhenQuarantedAtHome: number;\n    visitingHospitalRateWhenExposed: number;\n}\n\nexport interface Initialization {\n    origin: keyof Districts; // TODO: \n    initialSize: number;\n}\n\nexport interface WorldParam {\n    individual: IndividualParam;\n    disease: IDisease;\n    numberOfScenePerDay: number; // 一天几幕, default 3\n    region: RegionalParam;\n    medicine: MedicalParam;\n    family: FamilyParam;\n    init: Initialization;\n}\n\nexport interface Size {\n    width: number;\n    height: number;\n}\nexport interface IWorld {\n    disease: IDisease;\n    individuals: IIndividual[];\n    districts: Districts;\n    datetime: DateTime;\n}\n\nexport interface DateTime {\n    day: number;\n    scene: number;\n}\n\nexport interface Districts {\n    living: LivingQuater,\n    work: District,\n    publicTransport: District,\n    hospital: Hospital,\n    medicalBed: District,\n    facility: District,\n    cemetery: District\n}\n\nexport interface Position {\n    x: number;\n    y: number;\n}\n\n\nexport interface AggregatedInfo {\n    districtDistribution: {\n        medicalBed: number,\n        living: number,\n        work: number,\n        publicTransport: number,\n        hospital: number,\n        facility: number,\n        cemetery: number\n    },\n    population: {\n        susceptible: number;\n        incubating: number;\n        latentlyInfactious: number;\n        exposedInfactious: number;\n        serious: number;\n        dead: number;\n        recovered: number;\n    },\n    quarantined: {\n        total: number;\n        atHome: number;\n        atHospital: number;\n        confirmed: number;\n        suspected: number;\n    },\n    doctor: {\n        available: number,\n        dead: number,\n        ill: number,\n        total: number\n    },\n    R0: number;\n    datetime: DateTime\n}","import { WorldParam } from \"./model/type\";\n\nexport const theme = {\n    plotBackground: {\n        fill: \"rgb(25, 23, 44)\"\n    }, // 绘图区域\n    animation: true,\n    axis: {\n        top: {\n            label: {\n                textStyle: {\n                    fill: \"#A6A6A6\"\n                }\n            },\n            line: {\n                stroke: \"#737373\"\n            },\n            tickLine: {\n                stroke: \"#737373\"\n            }\n        },\n        bottom: {\n            label: {\n                textStyle: {\n                    fill: \"#A6A6A6\"\n                }\n            },\n            line: {\n                stroke: \"#737373\"\n            },\n            tickLine: {\n                stroke: \"#737373\"\n            }\n        },\n        left: {\n            label: {\n                textStyle: {\n                    fill: \"#A6A6A6\"\n                }\n            },\n            grid: {\n                lineStyle: {\n                    stroke: \"#404040\"\n                }\n            }\n        },\n        right: {\n            label: {\n                textStyle: {\n                    fill: \"#A6A6A6\"\n                }\n            },\n            grid: {\n                lineStyle: {\n                    stroke: \"#404040\"\n                }\n            }\n        },\n        circle: {\n            label: {\n                textStyle: {\n                    fill: \"#A6A6A6\"\n                }\n            },\n            line: {\n                stroke: \"#737373\"\n            },\n            tickLine: {\n                stroke: \"#737373\"\n            },\n            grid: {\n                lineStyle: {\n                    stroke: \"#404040\"\n                }\n            }\n        },\n        radius: {\n            label: {\n                textStyle: {\n                    fill: \"#A6A6A6\"\n                }\n            },\n            line: {\n                stroke: \"#737373\"\n            },\n            tickLine: {\n                stroke: \"#737373\"\n            },\n            grid: {\n                lineStyle: {\n                    stroke: \"#404040\"\n                }\n            }\n        },\n        helix: {\n            line: {\n                stroke: \"#737373\"\n            },\n            tickLine: {\n                stroke: \"#737373\"\n            }\n        }\n    },\n    label: {\n        textStyle: {\n            fill: \"#A6A6A6\"\n        }\n    },\n    legend: {\n        right: {\n            textStyle: {\n                fill: \"#737373\"\n            },\n            unCheckColor: \"#bfbfbf\"\n        },\n        left: {\n            textStyle: {\n                fill: \"#737373\"\n            }, // 图例项文本的样式\n            unCheckColor: \"#bfbfbf\"\n        },\n        top: {\n            textStyle: {\n                fill: \"#737373\"\n            }, // 图例项文本的样式\n            unCheckColor: \"#bfbfbf\"\n        },\n        bottom: {\n            textStyle: {\n                fill: \"#737373\"\n            }, // 图例项文本的样式\n            unCheckColor: \"#bfbfbf\"\n        },\n        html: {\n            'g2-legend': {\n                color: \"#D9D9D9\"\n            }\n        },\n        gradient: {\n            textStyle: {\n                fill: \"#D9D9D9\"\n            },\n            lineStyle: {\n                stroke: \"#404040\"\n            }\n        }\n    },\n    tooltip: {\n        // css style for tooltip\n        [`g2-tooltip`]: {\n            color: \"#D9D9D9\",\n            backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n            boxShadow: \"0px 0px 2px #000\"\n        }\n    },\n    tooltipCrosshairsRect: {\n        type: \"rect\",\n        rectStyle: {\n            fill: \"#fff\",\n            opacity: 0.1\n        }\n    }, // tooltip 辅助背景框样式\n    tooltipCrosshairsLine: {\n        lineStyle: {\n            stroke: \"rgba(255, 255, 255, 0.45)\"\n        }\n    },\n    guide: {\n        line: {\n            text: {\n                style: {\n                    fill: \"#A6A6A6\"\n                }\n            }\n        },\n        text: {\n            style: {\n                fill: \"#A6A6A6\"\n            }\n        },\n        region: {\n            // TODO\n            style: {\n                lineWidth: 0, // 辅助框的边框宽度\n                fill: \"#000\", // 辅助框填充的颜色\n                fillOpacity: 0.04 // 辅助框的背景透明度\n            } // 辅助框的图形样式属性\n        }\n    }\n};\n\nexport const defaultWorldParam: WorldParam = {\n    disease: {\n        cureRate: 1 / 3 / 30 / 50,\n        deadRate: 1 / 3 / 30 / 100,\n        immuneRate: 0,\n        infectiousRate: 0.02,\n        name: 'virus',\n        selfRecoverRate: 0.0,\n        seriousRate: 1 / 3 / 50,\n        toExposedInfactiousRate: 1 / 3 / 500,\n        toLatentlyInfactiousRate: 1 / 3 / 4,\n    },\n    family: {\n        familyPopulationDistribution: [\n            [60, 2],\n            [75, 4],\n            [30, 8],\n            [15, 16]\n        ],\n        partyRate: 0.05,\n    },\n    medicine: {\n        confirmRate: 0.05,\n        cureRateInHospital: 0.0002,\n        cureRateOnMedicalBed: 0.0004,\n        deteriorateFactorOnMedicalBed: 0.5,\n        visitingHospitalRate: 0.005,\n        doctorNum: 10,\n        infactiousRateBetweenDoctorAndPatient: 1 / 50000,\n        infactiousRateBetweenPatients: 1 / 10000,\n        medicalBedNumber: 4\n    },\n    individual: {\n        goOutRateWhenQuarantedAtHome: 0.01,\n        visitingHospitalRateWhenExposed: 0.02,\n    },\n    numberOfScenePerDay: 3,\n    init: {\n        origin: 'cemetery',\n        initialSize: 4\n    },\n    region: {\n        densityOfPopulation: 10,\n        doPeriodicPhysicalExamination: true,\n        facilityActiveRate: 10,\n        privateCarRate: 0.2,\n        unemploymentRate: 0.07\n    }\n};","import { Individual } from \"./Individual\";\n// TODO: R0\n\nexport class IllRelation {\n    from?: Individual;\n    to?: Individual[];\n    constructor(\n        public host: Individual\n    ){}\n\n    infect(to: Individual) {\n        if (this.to == null) {\n            this.to = [to];\n        } else {\n            this.to.push(to);\n        }\n\n        to.illRelation.from = this.host;\n    }\n}","import {\n    IDisease,\n    IIndividual,\n    IllState,\n    Districts,\n    TreatmentState,\n    QuanrantineState,\n    MedicalParam,\n    IndividualParam\n} from \"./type\";\nimport { upgradeIll } from \"./Disease\";\nimport { Place, District } from \"./District\";\nimport { Hospital } from \"./Hospital\";\nimport { IllRelation } from \"./IllRelation\";\n\n// TODO: 插值动画\nexport class Individual implements IIndividual {\n    currentPlace: Place;\n    illRelation: IllRelation = new IllRelation(this);\n    illState: import(\"./type\").IllState;\n    hasCar: boolean;\n    visitingHospitalRate: number;\n    wearMask: boolean;\n    home: Place;\n    workPlace?: Place;\n    param: IndividualParam;\n    hospitalPlace?: Place;\n    targetingFacilityPlaces: Place[];\n    treatmentState: TreatmentState;\n    isDoctor: boolean;\n    estimatedR0: number | undefined = undefined;\n\n    constructor(data: IIndividual) {\n        this.isDoctor = data.isDoctor;\n        this.illState = data.illState;\n        this.hasCar = data.hasCar;\n        this.visitingHospitalRate = data.visitingHospitalRate;\n        this.wearMask = data.wearMask;\n        this.home = data.home;\n        this.workPlace = data.workPlace;\n        this.hospitalPlace = data.hospitalPlace;\n        this.targetingFacilityPlaces = data.targetingFacilityPlaces;\n        this.currentPlace = data.currentPlace;\n        this.treatmentState = data.treatmentState;\n        this.param = data.param;\n    }\n\n    get isQuarantined() {\n        return (\n            this.treatmentState.quanrantine > 0 ||\n            this.illState === IllState.dead\n        );\n    }\n\n    get isDead() {\n        return this.illState === IllState.dead;\n    }\n\n    get cannotMoveAtAll() {\n        return this.treatmentState.quanrantine === QuanrantineState.atHospital || this.illState === IllState.dead;\n    }\n\n    postInfect(other: Individual) {\n        this.illRelation.infect(other);\n    }\n\n    preGoto(publicTransportDistrict: District) {\n        // TODO: sometimes people don't move\n        if (this.hasCar || this.isQuarantined) {\n            // do not need to use public transport\n            return;\n        }\n\n        this.beInPlace(publicTransportDistrict.nextAvailablePlace());\n    }\n\n    beInPlace(place: Place) {\n        this.currentPlace.remove(this);\n        this.currentPlace = place;\n        place.push(this);\n    }\n\n    gotoWork(districts: Districts) {\n        if (this.cannotMoveAtAll) {\n            return;\n        }\n\n        if (this.treatmentState.quanrantine === QuanrantineState.atHome) {\n            if (!districts.hospital.isFull) {\n                this.beInPlace(districts.hospital.nextAvailablePlace());\n            }\n\n            return;\n        }\n\n        if (this.isDoctor) {\n            this.beInPlace(this.workPlace);\n            return;\n        }\n\n\n        if (this.workPlace) {\n            this.beInPlace(this.workPlace);\n        }\n    }\n\n    gotoFacility() {\n        if (this.cannotMoveAtAll) {\n            return;\n        }\n\n        if (this.isQuarantined) {\n            return;\n        }\n\n        if (this.targetingFacilityPlaces.length >= 1) {\n            let index = Math.floor(\n                Math.random() * this.targetingFacilityPlaces.length\n            );\n            let count = 0;\n            while (\n                this.targetingFacilityPlaces[index].isFull &&\n                count < this.targetingFacilityPlaces.length\n            ) {\n                index = (index + 1) % this.targetingFacilityPlaces.length;\n                count++;\n            }\n\n            // if not full\n            if (count !== this.targetingFacilityPlaces.length) {\n                this.beInPlace(this.targetingFacilityPlaces[index]);\n            }\n        }\n    }\n\n    goHome() {\n        if (this.cannotMoveAtAll) {\n            return;\n        }\n\n        this.beInPlace(this.home);\n    }\n\n    gotoHospital(district: Hospital) {\n        if (this.cannotMoveAtAll) {\n            return;\n        }\n\n        this.beInPlace(district.nextAvailablePlace());\n    }\n\n    goRandomPlace(districts: Districts) {\n        if (this.cannotMoveAtAll) {\n            return;\n        }\n\n        if (\n            !districts.hospital.isFull &&\n            this.treatmentState.quanrantine === QuanrantineState.atHome\n        ) {\n            this.gotoHospital(districts.hospital);\n            return;\n        }\n\n        if (\n            !districts.hospital.isFull &&\n            Math.random() < this.visitingHospitalRate\n        ) {\n            this.gotoHospital(districts.hospital);\n            return;\n        }\n\n        if (!this.isQuarantined) {\n            this.gotoFacility();\n        } else if (\n            this.treatmentState.quanrantine === QuanrantineState.atHome\n        ) {\n            if (Math.random() < this.param.goOutRateWhenQuarantedAtHome) {\n                this.gotoFacility();\n            }\n        }\n    }\n\n    upgrade(disease: IDisease, param: MedicalParam) {\n        let factor = 1;\n        if (this.treatmentState.quanrantine === QuanrantineState.atHospital) {\n            factor = param.deteriorateFactorOnMedicalBed;\n        }\n\n        this.illState = upgradeIll(this.illState, disease, factor);\n        if (this.illState === IllState.serious) {\n            if (this.treatmentState.quanrantine <= QuanrantineState.atHome) {\n                this.treatmentState.quanrantine = QuanrantineState.atHome;\n                this.visitingHospitalRate = 1;\n            }\n        } else if (this.illState === IllState.exposedInfactious) {\n            this.visitingHospitalRate = this.param.visitingHospitalRateWhenExposed;\n        }\n    }\n\n    get isWorking() {\n        return this.illState <= IllState.latentlyInfactious;\n    }\n}\n","import {IDisease, IllState} from './type';\n\nexport function upgradeIll(illState: IllState, disease: IDisease, factor: number) {\n    if (illState <= IllState.susceptible){\n        return illState;\n    }\n\n    if (illState === IllState.incubating) {\n        if (Math.random() < disease.toLatentlyInfactiousRate * factor) {\n            return IllState.latentlyInfactious;\n        }\n    } else if (illState === IllState.latentlyInfactious) {\n        if (Math.random() < disease.toExposedInfactiousRate * factor) {\n            return IllState.exposedInfactious;\n        }\n    } else if (illState === IllState.exposedInfactious) {\n        if (Math.random() < disease.seriousRate * factor) {\n            return IllState.serious;\n        }\n    } else if (illState === IllState.serious) {\n        if (Math.random() < disease.deadRate * factor) {\n            return IllState.dead;\n        }\n    } \n\n    if (Math.random() < disease.selfRecoverRate) {\n        return IllState.recovered;\n    }\n\n    return illState;\n}\n","import { IIndividual } from \"./type\";\nimport { Individual } from \"./Individual\";\n\nexport class Place{\n    public people: Set<IIndividual>;\n    constructor(\n        public index: number,\n        public district: District,\n        public max: number\n    ) {\n        this.people = new Set();\n    }\n\n    push(id: Individual) {\n        this.people.add(id);\n    }\n\n    merge(place: Place) {\n        for (let it = place.people.values(), val: Individual = null; (val=it.next().value) != null; ) {\n            val!.beInPlace(this);\n            this.people.add(val);\n        }\n\n        place.people.clear();\n    }\n\n    remove(id: Individual) {\n        this.people.delete(id);\n    }\n\n    clear() {\n        this.people.clear();\n    }\n\n    mapPeople(func: (person: IIndividual) => any) {\n        this.people.forEach(func);\n    }\n\n    get length() {\n        return this.people.size;\n    }\n\n    get isFull() {\n        return this.people.size >= this.max;\n    }\n}\n\nexport class District {\n    places: Place[];\n    maxPopulation: number;\n    availableIndex: number = 0;\n    constructor(public name: string, num: number, max: number) {\n        this.places = [];\n        for (let i = 0; i < num; i++) {\n            this.places.push(new Place(i, this, max));\n        }\n\n        this.maxPopulation = max * num;\n    }\n\n    mapPeople(func: (person: IIndividual) => any) {\n        for (const place of this.places) {\n            place.mapPeople(func);\n        }\n    }\n\n    beforeSceneStart() {\n        this.availableIndex = 0;\n    }\n\n    get isFull(): boolean {\n        while (this.places.length > this.availableIndex && this.places[this.availableIndex].isFull) {\n            this.availableIndex++;\n        } \n\n        return this.availableIndex >= this.places.length;\n    }\n\n    nextAvailablePlace = (): Place => {\n        if (this.isFull) {\n            throw new Error();\n        }\n\n        return this.places[this.availableIndex];\n    };\n\n    randomPlace = (): Place => {\n        return this.places[Math.floor(Math.random() * this.places.length)];\n    }\n\n    get population() {\n        let sum = 0;\n        for (const place of this.places) {\n            sum += place.people.size;\n        }\n\n        return sum;\n    }\n}\n\nexport class LivingQuater extends District {\n    public name: string = 'living';\n    private fillIndex: number = 0;\n    constructor(distribution: [number, number][]) {\n        super('living', 0, 0);\n        let index = 0;\n        for (const [num, familySize] of distribution) {\n            for (let i = 0; i < num; i ++) {\n                this.places.push(new Place(index, this, familySize))\n                index ++;\n            }\n        }\n    }\n\n    nextFillingPlace() {\n        if (this.places[this.fillIndex].isFull) {\n            this.fillIndex++;\n        }\n\n        return this.places[this.fillIndex];\n    }\n}\n","import { District, } from \"./District\";\nimport { IllState, MedicalParam, QuanrantineState } from \"./type\";\nimport { Individual } from \"./Individual\";\n\nexport class Hospital extends District {\n    name = \"hospital\";\n    doctors: Individual[] = [];\n    constructor(\n        public param: MedicalParam,\n        public medicalBed: District,\n        num: number,\n        max: number\n    ) {\n        super(\"hospital\", num, max);\n    }\n\n    exam() {\n        this.mapPeople(this.examPerson);\n        this.medicalBed.mapPeople(this.examPerson);\n    }\n\n    get isFull(): boolean {\n        while (this.availableIndex < this.places.length) {\n            if (!this.doctors[this.availableIndex].isWorking) {\n                this.availableIndex++;\n            } else if (this.places[this.availableIndex].isFull) {\n                this.availableIndex++;\n            } else {\n                break;\n            }\n        }\n\n        return this.availableIndex >= this.places.length;\n    }\n\n    hospitalize(person: Individual) {\n        if (this.medicalBed.isFull) {\n            person.treatmentState.quanrantine = QuanrantineState.atHome;\n        } else {\n            person.treatmentState.quanrantine = QuanrantineState.atHospital;\n            person.beInPlace(this.medicalBed.nextAvailablePlace());\n        }\n    }\n\n    examPerson = (person: Individual) => {\n        if (person.treatmentState.isConfirmed) {\n            if (\n                person.treatmentState.quanrantine ===\n                QuanrantineState.atHospital\n            ) {\n                if (Math.random() < this.param.cureRateOnMedicalBed) {\n                    person.illState = IllState.recovered;\n                }\n            } else if (Math.random() < this.param.cureRateInHospital) {\n                person.illState = IllState.recovered;\n            }\n            if (person.illState === IllState.recovered) {\n                person.treatmentState = {\n                    isConfirmed: false,\n                    isSuspected: false,\n                    quanrantine: QuanrantineState.none\n                };\n                person.visitingHospitalRate = this.param.visitingHospitalRate;\n                person.goHome();\n            }\n        } else if (person.treatmentState.isSuspected) {\n            if (Math.random() < this.param.confirmRate) {\n                person.treatmentState.isConfirmed = true;\n            }\n        }\n\n        if (\n            person.illState >= IllState.exposedInfactious &&\n            person.currentPlace.district !== this.medicalBed\n        ) {\n            person.treatmentState.isSuspected = true;\n            person.visitingHospitalRate = 1;\n            this.hospitalize(person);\n        }\n    };\n}\n","import {\n    IWorld,\n    IIndividual,\n    WorldParam,\n    DateTime,\n    Districts,\n    IDisease,\n    IllState,\n    isInfectious,\n    AggregatedInfo,\n    QuanrantineState\n} from \"./type\";\nimport { Individual } from \"./Individual\";\nimport { District, LivingQuater } from \"./District\";\nimport { Hospital } from \"./Hospital\";\n\ntype Listener = (world: World) => void;\nexport class World implements IWorld {\n    aggData: AggregatedInfo[] = [];\n    disease: IDisease;\n    districts: Districts;\n    datetime: DateTime;\n    numberOfScenePerDay: number;\n    individuals: Individual[];\n    population: number = 0;\n    postSceneListeners: Listener[] = [];\n\n    constructor(public param: WorldParam) {\n        this.numberOfScenePerDay = param.numberOfScenePerDay;\n        this.disease = param.disease;\n        this.individuals = [];\n        for (const [num, familySize] of param.family\n            .familyPopulationDistribution) {\n            this.population += num * familySize;\n        }\n\n        const medicalBed = new District(\n            \"medicalBed\",\n            param.medicine.medicalBedNumber,\n            1\n        );\n\n        this.districts = {\n            medicalBed,\n            living: new LivingQuater(param.family.familyPopulationDistribution),\n            publicTransport: new District(\n                \"publicTransport\",\n                this.population / 30,\n                30\n            ),\n            hospital: new Hospital(\n                param.medicine,\n                medicalBed,\n                param.medicine.doctorNum,\n                20\n            ),\n            facility: new District(\"facility\", this.population / 20, 20),\n            work: new District(\"work\", this.population / 10, 10),\n            cemetery: new District(\"cemetery\", 1, 50000)\n        };\n\n        for (let i = 0; i < this.population; i++) {\n            const home = this.districts.living.nextFillingPlace();\n            const hasCar = Math.random() < param.region.privateCarRate;\n            const individual = new Individual({\n                workPlace: undefined,\n                isDoctor: false,\n                param: param.individual,\n                currentPlace: home,\n                home,\n                hasCar,\n                illState: IllState.susceptible,\n                targetingFacilityPlaces: Array(param.region.facilityActiveRate)\n                    .fill(0)\n                    .map(this.districts.facility.randomPlace),\n                visitingHospitalRate: this.param.medicine.visitingHospitalRate,\n                wearMask: false,\n                hospitalPlace: undefined,\n                treatmentState: {\n                    isConfirmed: false,\n                    quanrantine: QuanrantineState.none,\n                    isSuspected: false\n                }\n            });\n            home.push(individual);\n            this.individuals.push(individual);\n        }\n\n        this.randomizeIndivisuals();\n        for (let i = 0; i < this.population; i++) {\n            const workPlace =\n                Math.random() < param.region.unemploymentRate\n                    ? undefined\n                    : this.districts.work.nextAvailablePlace();\n            this.individuals[i].workPlace = workPlace;\n            if (workPlace) {\n                workPlace.push(this.individuals[i]);\n            }\n        }\n\n        this.districts.work.places.forEach((p) => p.clear());\n        this.randomizeIndivisuals();\n        const docNum = param.medicine.doctorNum;\n        for (let i = 0; i < docNum; i++) {\n            this.individuals[i].isDoctor = true;\n            this.individuals[i].workPlace = this.districts.hospital.places[i];\n            this.districts.hospital.doctors.push(this.individuals[i]);\n        }\n\n        this.datetime = {\n            day: 0,\n            scene: 0\n        };\n    }\n\n    start() {\n        this.randomizeIndivisuals();\n        for (let i = 0; i < this.param.init.initialSize; i++) {\n            this.individuals[i].illState = IllState.incubating;\n        }\n    }\n\n    goToWork() {\n        for (const id of this.individuals) {\n            id.gotoWork(this.districts);\n        }\n    }\n\n    setPostSceneListener(listener: Listener) {\n        this.postSceneListeners.push(listener);\n    }\n\n    party() {\n        const places = this.districts.living.places;\n        for (let i = 0; i < places.length; i++) {\n            if (places[i].length === 0) {\n                continue;\n            }\n\n            if (Math.random() < this.param.family.partyRate) {\n                const b = (i + Math.floor(Math.random() * 10) + 1) % this.districts.living.places.length;\n                places[i].merge(places[b]);\n            }\n        }\n    }\n\n    callItADay() {\n        for (const id of this.individuals) {\n            id.goHome();\n        }\n\n        this.party();\n    }\n\n    goRandomPlace() {\n        for (const id of this.individuals) {\n            id.goRandomPlace(this.districts);\n        }\n    }\n\n    infectOther(id: Individual, others: Set<IIndividual>, inHospital: boolean) {\n        if (!isInfectious(id.illState)) {\n            return;\n        }\n\n        let rate = this.param.disease.infectiousRate;\n        if (inHospital) {\n            if (id.isDoctor) {\n                rate = this.param.medicine\n                    .infactiousRateBetweenDoctorAndPatient;\n            } else {\n                rate = this.param.medicine\n                    .infactiousRateBetweenDoctorAndPatient;\n            }\n        }\n\n        for (\n            let iter = others.values(), other = null;\n            (other = iter.next().value);\n\n        ) {\n            if (other.illState !== IllState.susceptible) {\n                continue;\n            }\n\n            if (inHospital && other.isDoctor) {\n                rate = this.param.medicine\n                    .infactiousRateBetweenDoctorAndPatient;\n            }\n\n            if (Math.random() < rate) {\n                other.illState = IllState.incubating;\n                id.postInfect(other);\n            }\n        }\n    }\n\n    infect() {\n        for (const id of this.individuals) {\n            if (id.isDead) {\n                continue;\n            }\n\n            this.infectOther(\n                id,\n                id.currentPlace.people,\n                id.currentPlace.district === this.districts.hospital ||\n                    id.currentPlace.district === this.districts.medicalBed\n            );\n        }\n    }\n\n    upgradeDisease() {\n        for (const id of this.individuals) {\n            id.upgrade(this.param.disease, this.param.medicine);\n            // Move body to cemetery\n            if (id.illState === IllState.dead) {\n                id.beInPlace(this.districts.cemetery.places[0]);\n            }\n        }\n    }\n\n    preMove() {\n        for (const id of this.individuals) {\n            id.preGoto(this.districts.publicTransport);\n        }\n    }\n\n    setTimeToNextScene() {\n        this.datetime.scene++;\n        if (this.datetime.scene === this.numberOfScenePerDay) {\n            this.datetime.day++;\n            this.datetime.scene = 0;\n        }\n    }\n\n    beforeSceneStart() {\n        for (const district of Object.values(this.districts) as District[]) {\n            district.beforeSceneStart();\n        }\n    }\n\n    step() {\n        this.upgradeDisease();\n        this.beforeSceneStart();\n        this.preMove();\n        this.infect();\n        if (this.datetime.scene === 0) {\n            this.goToWork();\n        } else if (this.datetime.scene === this.numberOfScenePerDay - 1) {\n            this.callItADay();\n        } else {\n            this.goRandomPlace();\n        }\n\n        this.districts.hospital.exam();\n        this.infect();\n        this.setTimeToNextScene();\n        this.randomizeIndivisuals();\n        this.aggData.push(this.aggregateInfo);\n        for (const listener of this.postSceneListeners) {\n            listener(this);\n        }\n    }\n\n    isEnd() {\n        const info = this.aggregateInfo;\n        if (\n            info.population.exposedInfactious +\n                info.population.latentlyInfactious +\n                info.population.serious +\n                info.population.incubating ===\n            0\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    randomizeIndivisuals() {\n        for (let i = 0; i < this.individuals.length; i++) {\n            const index = Math.floor(Math.random() * this.individuals.length);\n            [this.individuals[i], this.individuals[index]] = [\n                this.individuals[index],\n                this.individuals[i]\n            ];\n        }\n    }\n\n    get aggregateInfo(): AggregatedInfo {\n        const agg: AggregatedInfo = {\n            districtDistribution: {\n                medicalBed: 0,\n                cemetery: 0,\n                facility: 0,\n                hospital: 0,\n                living: 0,\n                publicTransport: 0,\n                work: 0\n            },\n            population: {\n                dead: 0,\n                incubating: 0,\n                exposedInfactious: 0,\n                latentlyInfactious: 0,\n                recovered: 0,\n                serious: 0,\n                susceptible: 0\n            },\n            quarantined: {\n                total: 0,\n                atHome: 0,\n                atHospital: 0,\n                confirmed: 0,\n                suspected: 0\n            },\n            doctor: {\n                available: 0,\n                dead: 0,\n                ill: 0,\n                total: 0\n            },\n            datetime: {\n                ...this.datetime\n            },\n            R0: 0\n        };\n\n        const containedPatients = this.individuals.filter(\n            (x) => x.treatmentState.isConfirmed\n        );\n        agg.R0 = containedPatients.length?\n            containedPatients.reduce(\n                (left, cur) =>\n                    left + (cur.illRelation.to ? cur.illRelation.to.length : 0),\n                0\n            ) / (containedPatients.length) : 0;\n        for (const id of this.individuals) {\n            if (id.isDoctor) {\n                agg.doctor.total++;\n                if (id.isDead) {\n                    agg.doctor.dead++;\n                }\n                if (id.illState >= IllState.incubating) {\n                    agg.doctor.ill++;\n                }\n                if (id.isWorking) {\n                    agg.doctor.available++;\n                }\n            }\n            // @ts-ignore\n            agg.population[IllState[id.illState]] += 1;\n            if (!id.isDead) {\n                if (id.treatmentState.quanrantine === QuanrantineState.atHome) {\n                    agg.quarantined.total++;\n                    agg.quarantined.atHome++;\n                }\n\n                if (\n                    id.treatmentState.quanrantine ===\n                    QuanrantineState.atHospital\n                ) {\n                    agg.quarantined.total++;\n                    agg.quarantined.atHospital++;\n                }\n\n                if (id.treatmentState.isConfirmed) {\n                    agg.quarantined.confirmed++;\n                    agg.quarantined.suspected--;\n                }\n\n                if (id.treatmentState.isSuspected) {\n                    agg.quarantined.suspected++;\n                }\n            }\n        }\n\n        for (const key in this.districts) {\n            agg.districtDistribution[key] += this.districts[key].population;\n        }\n\n        return agg;\n    }\n}\n","import React from \"react\";\nimport { Modal, Button, InputNumber } from \"antd\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { WorldParam } from \"./model/type\";\nimport { defaultWorldParam } from \"./config\";\nimport styled from 'styled-components';\n\nconst SettingContainer = styled.div`\n    padding: 0 0.3rem;\n    margin: 0.2rem 0;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    span {\n        margin-right: 1rem;\n    }\n`;\n\nconst configEntries = {\n    disease: {\n        cureRate: \"number\",\n        deadRate: \"number\",\n        immuneRate: \"number\",\n        infectiousRate: \"number\",\n        name: \"string\",\n        selfRecoverRate: \"number\",\n        seriousRate: \"number\",\n        toExposedInfactiousRate: \"number\",\n        toLatentlyInfactiousRate: \"number\"\n    },\n    family: {\n        partyRate: \"number\"\n    },\n    medicine: {\n        confirmRate: \"number\",\n        cureRateInHospital: \"number\",\n        cureRateOnMedicalBed: \"number\",\n        deteriorateFactorOnMedicalBed: \"number\",\n        visitingHospitalRate: \"number\",\n        doctorNum: \"number\",\n        infactiousRateBetweenDoctorAndPatient: \"number\",\n        infactiousRateBetweenPatients: \"number\",\n        medicalBedNumber: \"number\"\n    },\n    individual: {\n        goOutRateWhenQuarantedAtHome: \"number\",\n        visitingHospitalRateWhenExposed: \"number\"\n    },\n    numberOfScenePerDay: \"number\",\n    region: {\n        densityOfPopulation: \"number\",\n        doPeriodicPhysicalExamination: \"number\",\n        facilityActiveRate: \"number\",\n        privateCarRate: \"number\",\n        unemploymentRate: \"number\"\n    }\n};\n\ninterface Props {\n    setParams: (wordParam: WorldParam) => void;\n}\n\nconst changeParam = (state: any, path: string[], value: any) => {\n    const obj = Object.assign({}, state);\n    let target = obj;\n    let attr = \"\";\n    for (let i = 0; i < path.length; i++) {\n        attr = path[i];\n        if (i !== path.length - 1) {\n            target[attr] = Object.assign({}, target[attr]);\n            target = obj[attr];\n        }\n    }\n\n    target[attr] = value;\n    return obj;\n};\n\nexport const Setting: React.FunctionComponent<Props> = (props: Props) => {\n    const [visible, setVisible] = React.useState(false);\n    const [worldParam, setWorldParam] = React.useState(\n        (JSON.parse(localStorage.getItem(\"world-param\")) as WorldParam) ||\n            defaultWorldParam\n    );\n    const setVisibleTrue = React.useCallback(() => {\n        setVisible(true);\n    }, []);\n    const setVisibleFalse = React.useCallback(() => {\n        setVisible(false);\n    }, []);\n    function genParamChanger(params: string[]) {\n        return (value: any) =>\n            setWorldParam(changeParam(worldParam, params, value));\n    }\n    const setParam = React.useCallback(() => {\n        props.setParams(worldParam);\n        localStorage.setItem(\"world-param\", JSON.stringify(worldParam));\n        setVisibleFalse();\n    }, [props, worldParam, setVisibleFalse]);\n    const settings = [];\n    for (const parentName in configEntries) {\n        const subtype = configEntries[parentName];\n        settings.push(<h3>{parentName}</h3>);\n        for (const settingName in subtype) {\n            const settingType = subtype[settingName];\n            if (settingType === \"number\") {\n                const v = worldParam[parentName][settingName];\n                const step = v !== 0 ? Math.floor(Math.log10(v)) : 0;\n                settings.push(\n                    <SettingContainer>\n                        <span >{settingName}</span>\n                        <InputNumber\n                            key={parentName + \"-\" + settingType}\n                            min={0}\n                            max={1000}\n                            step={Math.pow(10, step)}\n                            onChange={genParamChanger([\n                                parentName,\n                                settingName\n                            ])}\n                            defaultValue={v}\n                        />\n                    </SettingContainer>\n                );\n            } else if (settingType === \"string\") {\n                settings.push();\n            }\n        }\n    }\n    return (\n        <div>\n            <Button\n                onClick={setVisibleTrue}\n                style={{ margin: \"0.5rem \" }}\n                icon={<SettingOutlined />}\n            >\n                Settings\n            </Button>\n            <Modal\n                title={\"Setting\"}\n                onOk={setParam}\n                onCancel={setVisibleFalse}\n                visible={visible}\n            >\n                {settings}\n            </Modal>\n            )\n        </div>\n    );\n};\n","import React from \"react\";\nimport { StackPopulation } from \"./vis/IllStateDist\";\nimport { DistrictDistribution } from \"./vis/DistrictDistribution\";\nimport { PatientInfo } from \"./vis/PatientInfo\";\nimport { R0 } from \"./vis/R0\";\nimport { World } from \"./vis/World\";\n\nimport {\n    CaretRightOutlined,\n    CloseOutlined,\n    PauseOutlined,\n    StepForwardOutlined,\n} from '@ant-design/icons';\n\nimport { Row, Col, Button } from \"antd\";\nimport { G2 } from \"bizcharts\";\nimport { theme, defaultWorldParam } from \"./config\";\nimport { World as WorldModel } from \"./model/World\";\nimport img from \"./res/virus.jpg\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { AggregatedInfo, WorldParam } from \"./model/type\";\nimport styled from \"styled-components\";\nimport { Setting } from \"./setting\";\n\nconst { Global } = G2; // 获取 Global 全局对象\n// @ts-ignore\nGlobal.registerTheme(\"new\", theme);\n// @ts-ignore\nGlobal.setTheme(\"new\");\n\nconst timeSlots = [\"00:00\", \"9:30\", \"18:00\"];\nconst DatetimeContainer = styled.div`\n    position: absolute;\n    left: 1em;\n    top: 1em;\n    padding: 0.5em 1em;\n    background-color: rgba(10, 20, 90, 0.3);\n    border: 1px solid rgb(15, 30, 150);\n    color: #aae;\n    border-radius: 4px;\n    box-shadow: 0 6px 4px 4px rgba(0, 0, 0, 0.2);\n`;\n\nclass App extends React.Component {\n    world = new WorldModel(JSON.parse(localStorage.getItem('world-param')) || defaultWorldParam);\n    looping: boolean = false;\n    state: {\n        data: AggregatedInfo[];\n        looping: boolean;\n    };\n    buffIndex: number = 0;\n    worldRef: React.RefObject<World>;\n    constructor(prop) {\n        super(prop);\n        this.state = {\n            data: [],\n            looping: false\n        };\n        this.world.start();\n        this.worldRef = React.createRef();\n    }\n\n    componentWillMount() {\n        document.body.style.backgroundImage = `url(${img})`;\n    }\n\n    playLoop = () => {\n        if (!this.looping) {\n            return;\n        }\n\n        if (this.buffIndex > 100) {\n            this.setState({ data: this.world.aggData });\n            this.buffIndex = 0;\n        } else {\n            for (let i = 0; i < 10; i++) {\n                this.world.step();\n            }\n\n            this.buffIndex += 10;\n        }\n\n        setTimeout(this.playLoop, 0);\n    };\n\n    step = () => {\n        this.pause();\n        this.world.step();\n        console.log(this.world.datetime);\n        this.worldRef.current.step();\n        this.setState({ data: this.world.aggData });\n    };\n\n    play = () => {\n        this.start();\n        this.playLoop();\n    };\n\n    reset = () => {\n        this.world = new WorldModel(defaultWorldParam);\n        this.world.start();\n        this.setState({ data: [] });\n        this.pause();\n    };\n\n    start = () => {\n        this.setState({ looping: true });\n        this.looping = true;\n    };\n\n    pause = () => {\n        this.setState({ looping: false });\n        this.looping = false;\n    };\n\n    setParam = (param: WorldParam) => {\n        this.world.param = param;\n    }\n\n    render() {\n        const style = {\n            boxShadow: '3px 0px 2px 0px rgba(0, 0, 0, 0.2)',\n            padding: '2em',\n        };\n        const { datetime } = this.world;\n        return (\n            <Row className={\"main\"} justify={'center'}>\n                <Col xl={12} lg={24} style={style}>\n                    <World world={this.world} ref={this.worldRef} />\n                    <Row>\n                        {!this.state.looping ? (\n                            <Button\n                                onClick={this.play}\n                                style={{ margin: \"0.5rem 0.5rem 0.5rem 0\" }}\n                                icon={<CaretRightOutlined />}\n                            >\n                                Play\n                            </Button>\n                        ) : (\n                            <Button\n                                onClick={this.pause}\n                                style={{ margin: \"0.5rem 0.5rem 0.5rem 0\" }}\n                                icon={<PauseOutlined />}\n                            >\n                                Pause\n                            </Button>\n                        )}\n                        <Button\n                            onClick={this.step}\n                            style={{ margin: \"0.5rem\" }}\n                            icon={<StepForwardOutlined />}\n                        >\n                            Step\n                        </Button>\n                        <Button\n                            onClick={this.reset}\n                            style={{ margin: \"0.5rem \" }}\n                            icon={<CloseOutlined />}\n                        >\n                            Reset\n                        </Button>\n                        <Setting setParams={this.setParam}/>\n                    </Row>\n                </Col>\n                <Col xl={4} lg={11} style={style}>\n                    <DatetimeContainer>\n                        Day: {datetime.day}\n                        <br />\n                        Time: {timeSlots[datetime.scene]}\n                    </DatetimeContainer>\n                </Col>\n\n                <Col xl={8} lg={11} style={style}>\n                    <div className=\"charts\">\n                        <StackPopulation agg={this.state.data} />\n                        <DistrictDistribution agg={this.state.data} />\n                        <PatientInfo agg={this.state.data} />\n                        <R0 agg={this.state.data} />\n                    </div>\n                </Col>\n            </Row>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/virus.a16df4b7.jpg\";"],"sourceRoot":""}